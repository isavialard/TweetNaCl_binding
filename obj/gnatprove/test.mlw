(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 98 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (98 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:109, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 97 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (97 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:109, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 112 0 0][@name:Default_Priority] [@model_trace:5278] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:110, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 98 98 >
 
 val constant first 
   : int
  ensures { result =  (98 : int) }
 
 val constant last 
   : int
  ensures { result =  (98 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:110, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tindex32B" defined at tweetnacl_h.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tindex32B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tindex32B =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tindex32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tindex32B__ref =
  { mutable tindex32B__content : tindex32B }
 
 function tindex32B__ref_tindex32B__content__projection 
   (a : tindex32B__ref) : tindex32B =
  a.tindex32B__content
 
 meta "model_projection" function tindex32B__ref_tindex32B__content__projection
 
 meta "inline:no" function tindex32B__ref_tindex32B__content__projection
 
 val tindex32B__havoc 
   (x : tindex32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tindex32B" defined at tweetnacl_h.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tindex32B__rep
 use        Tweetnacl_h__Tindex32B as Tweetnacl_h__Tindex32B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__Tindex32B.tindex32B) : int =
  (Tweetnacl_h__Tindex32B.tindex32B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__Tindex32B.tindex32B, 
 predicate in_range = Tweetnacl_h__Tindex32B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "index32" defined at tweetnacl_h.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type index32 =
  < range 1 32 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (32 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = index32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index32__ref =
  { mutable index32__content : index32 }
 
 function index32__ref_index32__content__projection 
   (a : index32__ref) : index32 =
  a.index32__content
 
 meta "model_projection" function index32__ref_index32__content__projection
 
 meta "inline:no" function index32__ref_index32__content__projection
 
 val index32__havoc 
   (x : index32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index32" defined at tweetnacl_h.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index32__rep
 use        Tweetnacl_h__index32 as Tweetnacl_h__index32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__index32.index32) : int =
  (Tweetnacl_h__index32.index32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__index32.index32, 
 predicate in_range = Tweetnacl_h__index32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "u8" defined at tweetnacl_h.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__u8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".BV8 as BV8

 type u8 
 
 val constant attr__ATTRIBUTE_MODULUS 
   : BV8.t

 
 val constant first 
   : BV8.t
  ensures { result =  ( 0 : BV8.t ) }
 
 val constant last 
   : BV8.t
  ensures { result =  ( 255 : BV8.t ) }
 
 function first_int 
   : int =
  (0 : int)
 
 function last_int 
   : int =
  (255 : int)
 
 predicate in_range 
   (x : BV8.t) =
  true
 val in_range 
   (x : BV8.t) : bool
  ensures { result <-> in_range (x : BV8.t) }
 
 predicate in_range_int 
   (x : int) =
  BV8.uint_in_range x
 val in_range_int 
   (x : int) : bool
  ensures { result <-> in_range_int (x : int) }
 
 clone export "ada__model".Static_Modular_8 with axiom .,
 type t = u8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type u8__ref =
  { mutable u8__content : u8 }
 
 function u8__ref_u8__content__projection 
   (a : u8__ref) : u8 =
  a.u8__content
 
 meta "model_projection" function u8__ref_u8__content__projection
 
 meta "inline:no" function u8__ref_u8__content__projection
 
 val u8__havoc 
   (x : u8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "u8" defined at tweetnacl_h.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__u8__rep
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        "_gnatprove_standard".BV8 as BV8
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_BV8 with axiom .,
 type t = Tweetnacl_h__u8.u8, 
 predicate in_range = Tweetnacl_h__u8.in_range, 
 predicate in_range_int = Tweetnacl_h__u8.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TkeyB" defined at tweetnacl_h.ads:21, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Tweetnacl_h__u8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".BV8 as BV8
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Tweetnacl_h__u8__rep as Tweetnacl_h__u8__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Tweetnacl_h__u8.u8
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_156   : int.
   (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
    ((Tweetnacl_h__u8__rep.to_rep (get a temp___idx_156)) = (Tweetnacl_h__u8__rep.to_rep (get b ((b__first - a__first) + temp___idx_156))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_156   : int.
    (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
     ((Tweetnacl_h__u8__rep.to_rep (get a temp___idx_156)) = (Tweetnacl_h__u8__rep.to_rep (get b ((b__first - a__first) + temp___idx_156))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TkeyB" defined at tweetnacl_h.ads:21, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Tweetnacl_h__u8__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Tweetnacl_h__u8.component_type, 
 type map = Array__Int__Tweetnacl_h__u8.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Tweetnacl_h__u8.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TkeyB" defined at tweetnacl_h.ads:21, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Tweetnacl_h__u8_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8__rep as Tweetnacl_h__u8__rep
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_BV8_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Tweetnacl_h__u8.component_type, 
 function to_rep = Tweetnacl_h__u8__rep.to_rep, 
 type map = Array__Int__Tweetnacl_h__u8.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Tweetnacl_h__u8.get, 
 function bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq

end

(* Module for axiomatizing type "TkeyB" defined at tweetnacl_h.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__TkeyB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tindex32B as Tweetnacl_h__Tindex32B
 use        Tweetnacl_h__Tindex32B__rep as Tweetnacl_h__Tindex32B__rep
 use        Tweetnacl_h__index32 as Tweetnacl_h__index32
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 type component_type =
  Tweetnacl_h__u8.u8
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 type index_base_type = Tweetnacl_h__Tindex32B.tindex32B, 
 type index_rep_type = int, 
 function to_rep = Tweetnacl_h__Tindex32B__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Tweetnacl_h__Tindex32B.in_range, 
 predicate index_dynamic_property = Tweetnacl_h__index32.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tkeyB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tkeyB__ref =
  { mutable tkeyB__content : tkeyB }
 
 function tkeyB__ref_tkeyB__content__projection 
   (a : tkeyB__ref) : tkeyB =
  a.tkeyB__content
 
 meta "model_projection" function tkeyB__ref_tkeyB__content__projection
 
 meta "inline:no" function tkeyB__ref_tkeyB__content__projection
 
 val tkeyB__havoc 
   (x : tkeyB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "key" defined at tweetnacl_h.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__key
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 type component_type =
  Tweetnacl_h__u8.u8
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (32 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tindex64B" defined at tweetnacl_h.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tindex64B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tindex64B =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tindex64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tindex64B__ref =
  { mutable tindex64B__content : tindex64B }
 
 function tindex64B__ref_tindex64B__content__projection 
   (a : tindex64B__ref) : tindex64B =
  a.tindex64B__content
 
 meta "model_projection" function tindex64B__ref_tindex64B__content__projection
 
 meta "inline:no" function tindex64B__ref_tindex64B__content__projection
 
 val tindex64B__havoc 
   (x : tindex64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tindex64B" defined at tweetnacl_h.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tindex64B__rep
 use        Tweetnacl_h__Tindex64B as Tweetnacl_h__Tindex64B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__Tindex64B.tindex64B) : int =
  (Tweetnacl_h__Tindex64B.tindex64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__Tindex64B.tindex64B, 
 predicate in_range = Tweetnacl_h__Tindex64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "index64" defined at tweetnacl_h.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type index64 =
  < range 1 64 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (64 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = index64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index64__ref =
  { mutable index64__content : index64 }
 
 function index64__ref_index64__content__projection 
   (a : index64__ref) : index64 =
  a.index64__content
 
 meta "model_projection" function index64__ref_index64__content__projection
 
 meta "inline:no" function index64__ref_index64__content__projection
 
 val index64__havoc 
   (x : index64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index64" defined at tweetnacl_h.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index64__rep
 use        Tweetnacl_h__index64 as Tweetnacl_h__index64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__index64.index64) : int =
  (Tweetnacl_h__index64.index64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__index64.index64, 
 predicate in_range = Tweetnacl_h__index64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tkey64B" defined at tweetnacl_h.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tkey64B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Tweetnacl_h__Tindex64B as Tweetnacl_h__Tindex64B
 use        Tweetnacl_h__Tindex64B__rep as Tweetnacl_h__Tindex64B__rep
 use        Tweetnacl_h__index64 as Tweetnacl_h__index64

 type component_type =
  Tweetnacl_h__u8.u8
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 type index_base_type = Tweetnacl_h__Tindex64B.tindex64B, 
 type index_rep_type = int, 
 function to_rep = Tweetnacl_h__Tindex64B__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Tweetnacl_h__Tindex64B.in_range, 
 predicate index_dynamic_property = Tweetnacl_h__index64.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tkey64B =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tkey64B__ref =
  { mutable tkey64B__content : tkey64B }
 
 function tkey64B__ref_tkey64B__content__projection 
   (a : tkey64B__ref) : tkey64B =
  a.tkey64B__content
 
 meta "model_projection" function tkey64B__ref_tkey64B__content__projection
 
 meta "inline:no" function tkey64B__ref_tkey64B__content__projection
 
 val tkey64B__havoc 
   (x : tkey64B__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "key64" defined at tweetnacl_h.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__key64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 type component_type =
  Tweetnacl_h__u8.u8
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (64 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tindex24B" defined at tweetnacl_h.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tindex24B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tindex24B =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tindex24B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tindex24B__ref =
  { mutable tindex24B__content : tindex24B }
 
 function tindex24B__ref_tindex24B__content__projection 
   (a : tindex24B__ref) : tindex24B =
  a.tindex24B__content
 
 meta "model_projection" function tindex24B__ref_tindex24B__content__projection
 
 meta "inline:no" function tindex24B__ref_tindex24B__content__projection
 
 val tindex24B__havoc 
   (x : tindex24B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tindex24B" defined at tweetnacl_h.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tindex24B__rep
 use        Tweetnacl_h__Tindex24B as Tweetnacl_h__Tindex24B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__Tindex24B.tindex24B) : int =
  (Tweetnacl_h__Tindex24B.tindex24B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__Tindex24B.tindex24B, 
 predicate in_range = Tweetnacl_h__Tindex24B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "index24" defined at tweetnacl_h.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index24
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type index24 =
  < range 1 24 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = index24, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index24__ref =
  { mutable index24__content : index24 }
 
 function index24__ref_index24__content__projection 
   (a : index24__ref) : index24 =
  a.index24__content
 
 meta "model_projection" function index24__ref_index24__content__projection
 
 meta "inline:no" function index24__ref_index24__content__projection
 
 val index24__havoc 
   (x : index24__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index24" defined at tweetnacl_h.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index24__rep
 use        Tweetnacl_h__index24 as Tweetnacl_h__index24
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__index24.index24) : int =
  (Tweetnacl_h__index24.index24'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__index24.index24, 
 predicate in_range = Tweetnacl_h__index24.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TnonceB" defined at tweetnacl_h.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__TnonceB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Tweetnacl_h__Tindex24B as Tweetnacl_h__Tindex24B
 use        Tweetnacl_h__Tindex24B__rep as Tweetnacl_h__Tindex24B__rep
 use        Tweetnacl_h__index24 as Tweetnacl_h__index24

 type component_type =
  Tweetnacl_h__u8.u8
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 type index_base_type = Tweetnacl_h__Tindex24B.tindex24B, 
 type index_rep_type = int, 
 function to_rep = Tweetnacl_h__Tindex24B__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Tweetnacl_h__Tindex24B.in_range, 
 predicate index_dynamic_property = Tweetnacl_h__index24.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tnonceB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tnonceB__ref =
  { mutable tnonceB__content : tnonceB }
 
 function tnonceB__ref_tnonceB__content__projection 
   (a : tnonceB__ref) : tnonceB =
  a.tnonceB__content
 
 meta "model_projection" function tnonceB__ref_tnonceB__content__projection
 
 meta "inline:no" function tnonceB__ref_tnonceB__content__projection
 
 val tnonceB__havoc 
   (x : tnonceB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "nonce" defined at tweetnacl_h.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__nonce
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 type component_type =
  Tweetnacl_h__u8.u8
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (24 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "Tu64B" defined at tweetnacl_h.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tu64B
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tu64B =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tu64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tu64B__ref =
  { mutable tu64B__content : tu64B }
 
 function tu64B__ref_tu64B__content__projection 
   (a : tu64B__ref) : tu64B =
  a.tu64B__content
 
 meta "model_projection" function tu64B__ref_tu64B__content__projection
 
 meta "inline:no" function tu64B__ref_tu64B__content__projection
 
 val tu64B__havoc 
   (x : tu64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tu64B" defined at tweetnacl_h.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__Tu64B.tu64B) : int =
  (Tweetnacl_h__Tu64B.tu64B'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__Tu64B.tu64B, 
 predicate in_range = Tweetnacl_h__Tu64B.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "u64" defined at tweetnacl_h.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__u64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type u64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = u64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type u64__ref =
  { mutable u64__content : u64 }
 
 function u64__ref_u64__content__projection 
   (a : u64__ref) : u64 =
  a.u64__content
 
 meta "model_projection" function u64__ref_u64__content__projection
 
 meta "inline:no" function u64__ref_u64__content__projection
 
 val u64__havoc 
   (x : u64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "u64" defined at tweetnacl_h.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__u64__rep
 use        Tweetnacl_h__u64 as Tweetnacl_h__u64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__u64.u64) : int =
  (Tweetnacl_h__u64.u64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__u64.u64, 
 predicate in_range = Tweetnacl_h__u64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "index" defined at tweetnacl_h.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type index =
  < range 1 1000 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index__ref =
  { mutable index__content : index }
 
 function index__ref_index__content__projection 
   (a : index__ref) : index =
  a.index__content
 
 meta "model_projection" function index__ref_index__content__projection
 
 meta "inline:no" function index__ref_index__content__projection
 
 val index__havoc 
   (x : index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index" defined at tweetnacl_h.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__index__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Tweetnacl_h__index.index) : int =
  (Tweetnacl_h__index.index'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Tweetnacl_h__index.index, 
 predicate in_range = Tweetnacl_h__index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "plaintext" defined at tweetnacl_h.ads:28, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__plaintext
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index

 type component_type =
  Tweetnacl_h__u8.u8
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 type index_base_type = Tweetnacl_h__Tu64B.tu64B, 
 type index_rep_type = int, 
 function to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Tweetnacl_h__Tu64B.in_range, 
 predicate index_dynamic_property = Tweetnacl_h__index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type plaintext =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type plaintext__ref =
  { mutable plaintext__content : plaintext }
 
 function plaintext__ref_plaintext__content__projection 
   (a : plaintext__ref) : plaintext =
  a.plaintext__content
 
 meta "model_projection" function plaintext__ref_plaintext__content__projection
 
 meta "inline:no" function plaintext__ref_plaintext__content__projection
 
 val plaintext__havoc 
   (x : plaintext__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at test.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Test__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t1b =
  < range 1 37 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref =
  { mutable t1b__content : t1b }
 
 function t1b__ref_t1b__content__projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref_t1b__content__projection
 
 meta "inline:no" function t1b__ref_t1b__content__projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at test.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Test__T1b__rep
 use        Test__T1b as Test__T1b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Test__T1b.t1b) : int =
  (Test__T1b.t1b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Test__T1b.t1b, 
 predicate in_range = Test__T1b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T2b" defined at test.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Test__T2b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 type component_type =
  Tweetnacl_h__u8.u8
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (37 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "TTsmSP1" defined at test.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Test__TTsmSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep

 type tTsmSP1 =
  Tweetnacl_h__Tu64B.tu64B
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTsmSP1, 
 type rep_type = int, 
 function base_to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function base_of_rep = Tweetnacl_h__Tu64B__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTsmSP1__ref =
  { mutable tTsmSP1__content : tTsmSP1 }
 
 function tTsmSP1__ref_tTsmSP1__content__projection 
   (a : tTsmSP1__ref) : tTsmSP1 =
  a.tTsmSP1__content
 
 meta "model_projection" function tTsmSP1__ref_tTsmSP1__content__projection
 
 meta "inline:no" function tTsmSP1__ref_tTsmSP1__content__projection
 
 val tTsmSP1__havoc 
   (x : tTsmSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TsmS" defined at test.adb:16, created in Gnat2Why.Types.Translate_Type *)
module Test__TsmS
 use export Tweetnacl_h__plaintext
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tsmS =
  plaintext
 
 type tsmS__ref =
  { mutable tsmS__content : tsmS }
 
 function tsmS__ref_tsmS__content__projection 
   (a : tsmS__ref) : tsmS =
  a.tsmS__content
 
 meta "model_projection" function tsmS__ref_tsmS__content__projection
 
 meta "inline:no" function tsmS__ref_tsmS__content__projection
 
 val tsmS__havoc 
   (x : tsmS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "ciphertext" defined at tweetnacl_h.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Tweetnacl_h__ciphertext
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index

 type component_type =
  Tweetnacl_h__u8.u8
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Tweetnacl_h__u8.map, 
 function array_bool_eq = Array__Int__Tweetnacl_h__u8.bool_eq, 
 type index_base_type = Tweetnacl_h__Tu64B.tu64B, 
 type index_rep_type = int, 
 function to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Tweetnacl_h__Tu64B.in_range, 
 predicate index_dynamic_property = Tweetnacl_h__index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ciphertext =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type ciphertext__ref =
  { mutable ciphertext__content : ciphertext }
 
 function ciphertext__ref_ciphertext__content__projection 
   (a : ciphertext__ref) : ciphertext =
  a.ciphertext__content
 
 meta "model_projection" function ciphertext__ref_ciphertext__content__projection
 
 meta "inline:no" function ciphertext__ref_ciphertext__content__projection
 
 val ciphertext__havoc 
   (x : ciphertext__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTcSP1" defined at test.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Test__TTcSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep

 type tTcSP1 =
  Tweetnacl_h__Tu64B.tu64B
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTcSP1, 
 type rep_type = int, 
 function base_to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function base_of_rep = Tweetnacl_h__Tu64B__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTcSP1__ref =
  { mutable tTcSP1__content : tTcSP1 }
 
 function tTcSP1__ref_tTcSP1__content__projection 
   (a : tTcSP1__ref) : tTcSP1 =
  a.tTcSP1__content
 
 meta "model_projection" function tTcSP1__ref_tTcSP1__content__projection
 
 meta "inline:no" function tTcSP1__ref_tTcSP1__content__projection
 
 val tTcSP1__havoc 
   (x : tTcSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TcS" defined at test.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Test__TcS
 use export Tweetnacl_h__ciphertext
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tcS =
  ciphertext
 
 type tcS__ref =
  { mutable tcS__content : tcS }
 
 function tcS__ref_tcS__content__projection 
   (a : tcS__ref) : tcS =
  a.tcS__content
 
 meta "model_projection" function tcS__ref_tcS__content__projection
 
 meta "inline:no" function tcS__ref_tcS__content__projection
 
 val tcS__havoc 
   (x : tcS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTsmuSP1" defined at test.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Test__TTsmuSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep

 type tTsmuSP1 =
  Tweetnacl_h__Tu64B.tu64B
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTsmuSP1, 
 type rep_type = int, 
 function base_to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function base_of_rep = Tweetnacl_h__Tu64B__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTsmuSP1__ref =
  { mutable tTsmuSP1__content : tTsmuSP1 }
 
 function tTsmuSP1__ref_tTsmuSP1__content__projection 
   (a : tTsmuSP1__ref) : tTsmuSP1 =
  a.tTsmuSP1__content
 
 meta "model_projection" function tTsmuSP1__ref_tTsmuSP1__content__projection
 
 meta "inline:no" function tTsmuSP1__ref_tTsmuSP1__content__projection
 
 val tTsmuSP1__havoc 
   (x : tTsmuSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TsmuS" defined at test.adb:18, created in Gnat2Why.Types.Translate_Type *)
module Test__TsmuS
 use export Tweetnacl_h__plaintext
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tsmuS =
  plaintext
 
 type tsmuS__ref =
  { mutable tsmuS__content : tsmuS }
 
 function tsmuS__ref_tsmuS__content__projection 
   (a : tsmuS__ref) : tsmuS =
  a.tsmuS__content
 
 meta "model_projection" function tsmuS__ref_tsmuS__content__projection
 
 meta "inline:no" function tsmuS__ref_tsmuS__content__projection
 
 val tsmuS__havoc 
   (x : tsmuS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTmuSP1" defined at test.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Test__TTmuSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep

 type tTmuSP1 =
  Tweetnacl_h__Tu64B.tu64B
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTmuSP1, 
 type rep_type = int, 
 function base_to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function base_of_rep = Tweetnacl_h__Tu64B__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTmuSP1__ref =
  { mutable tTmuSP1__content : tTmuSP1 }
 
 function tTmuSP1__ref_tTmuSP1__content__projection 
   (a : tTmuSP1__ref) : tTmuSP1 =
  a.tTmuSP1__content
 
 meta "model_projection" function tTmuSP1__ref_tTmuSP1__content__projection
 
 meta "inline:no" function tTmuSP1__ref_tTmuSP1__content__projection
 
 val tTmuSP1__havoc 
   (x : tTmuSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TmuS" defined at test.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Test__TmuS
 use export Tweetnacl_h__plaintext
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tmuS =
  plaintext
 
 type tmuS__ref =
  { mutable tmuS__content : tmuS }
 
 function tmuS__ref_tmuS__content__projection 
   (a : tmuS__ref) : tmuS =
  a.tmuS__content
 
 meta "model_projection" function tmuS__ref_tmuS__content__projection
 
 meta "inline:no" function tmuS__ref_tmuS__content__projection
 
 val tmuS__havoc 
   (x : tmuS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TintB" defined at i-c.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c__TintB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tintB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tintB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tintB__ref =
  { mutable tintB__content : tintB }
 
 function tintB__ref_tintB__content__projection 
   (a : tintB__ref) : tintB =
  a.tintB__content
 
 meta "model_projection" function tintB__ref_tintB__content__projection
 
 meta "inline:no" function tintB__ref_tintB__content__projection
 
 val tintB__havoc 
   (x : tintB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TintB" defined at i-c.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c__TintB__rep
 use        Interfaces__c__TintB as Interfaces__c__TintB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__c__TintB.tintB) : int =
  (Interfaces__c__TintB.tintB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__c__TintB.tintB, 
 predicate in_range = Interfaces__c__TintB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "int" defined at i-c.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c__int
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int__ =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int____ref =
  { mutable int____content : int__ }
 
 function int____ref_int____content__projection 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref_int____content__projection
 
 meta "inline:no" function int____ref_int____content__projection
 
 val int____havoc 
   (x : int____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int" defined at i-c.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c__int__rep
 use        Interfaces__c__int as Interfaces__c__int
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Interfaces__c__int.int__) : int =
  (Interfaces__c__int.int__'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Interfaces__c__int.int__, 
 predicate in_range = Interfaces__c__int.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "k" defined at tweetnaclhl.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__isboxpublickey__k
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant k [#"tweetnaclhl.ads" 188 0 0][@name:k] [@model_projected] [@model_trace:15544] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at tweetnaclhl.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__isboxpublickey__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "isboxpublickey" defined at tweetnaclhl.ads:188, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__isboxpublickey
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val function isboxpublickey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
 
 val predicate isboxpublickey__function_guard 
   (temp___result_157 : int) (k : Array__Int__Tweetnacl_h__u8.map)

end

(* Module for defining the constant "k" defined at tweetnaclhl.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__isboxsecretkey__k
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant k [#"tweetnaclhl.ads" 190 0 0][@name:k] [@model_projected] [@model_trace:15582] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at tweetnaclhl.ads:190, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__isboxsecretkey__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "isboxsecretkey" defined at tweetnaclhl.ads:190, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__isboxsecretkey
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val function isboxsecretkey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
 
 val predicate isboxsecretkey__function_guard 
   (temp___result_158 : int) (k : Array__Int__Tweetnacl_h__u8.map)

end

(* Module for defining the constant "k" defined at tweetnaclhl.ads:191, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__issignpublickey__k
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant k [#"tweetnaclhl.ads" 191 0 0][@name:k] [@model_projected] [@model_trace:15601] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at tweetnaclhl.ads:191, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__issignpublickey__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "issignpublickey" defined at tweetnaclhl.ads:191, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__issignpublickey
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val function issignpublickey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
 
 val predicate issignpublickey__function_guard 
   (temp___result_159 : int) (k : Array__Int__Tweetnacl_h__u8.map)

end

(* Module for defining the constant "k" defined at tweetnaclhl.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__issignsecretkey__k
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant k [#"tweetnaclhl.ads" 192 0 0][@name:k] [@model_projected] [@model_trace:15620] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at tweetnaclhl.ads:192, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__issignsecretkey__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "issignsecretkey" defined at tweetnaclhl.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__issignsecretkey
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val function issignsecretkey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
 
 val predicate issignsecretkey__function_guard 
   (temp___result_160 : int) (k : Array__Int__Tweetnacl_h__u8.map)

end

(* Module for defining the constant "m" defined at tweetnaclhl.ads:41, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_sign__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext

 val constant m [#"tweetnaclhl.ads" 41 0 0][@name:m] [@model_projected] [@model_trace:14411] 
   : Tweetnacl_h__plaintext.plaintext

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at tweetnaclhl.ads:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "k" defined at tweetnaclhl.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_sign__k
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant k [#"tweetnaclhl.ads" 42 0 0][@name:k] [@model_projected] [@model_trace:14420] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at tweetnaclhl.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at tweetnaclhl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__issigned__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext

 val constant m [#"tweetnaclhl.ads" 193 0 0][@name:m] [@model_projected] [@model_trace:15639] 
   : Tweetnacl_h__plaintext.plaintext

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at tweetnaclhl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__issigned__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "issigned" defined at tweetnaclhl.ads:193, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__issigned
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext

 val function issigned 
   (m : Tweetnacl_h__plaintext.plaintext) : int
 
 val predicate issigned__function_guard 
   (temp___result_161 : int) (m : Tweetnacl_h__plaintext.plaintext)

end

(* Module for defining the constant "n" defined at tweetnaclhl.ads:194, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__neverusedyet__n
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant n [#"tweetnaclhl.ads" 194 0 0][@model_trace:15658] [@name:n] [@model_projected] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at tweetnaclhl.ads:194, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__neverusedyet__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "neverusedyet" defined at tweetnaclhl.ads:194, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__neverusedyet
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val function neverusedyet 
   (n : Array__Int__Tweetnacl_h__u8.map) : int
 
 val predicate neverusedyet__function_guard 
   (temp___result_162 : int) (n : Array__Int__Tweetnacl_h__u8.map)

end

(* Module for defining the constant "sm" defined at tweetnaclhl.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box__sm
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext

 val constant sm [#"tweetnaclhl.ads" 17 0 0][@name:sm] [@model_trace:14191] [@model_projected] 
   : Tweetnacl_h__plaintext.plaintext

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sm" defined at tweetnaclhl.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box__sm___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "n" defined at tweetnaclhl.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box__n
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant n [#"tweetnaclhl.ads" 18 0 0][@model_trace:14200] [@name:n] [@model_projected] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at tweetnaclhl.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pk" defined at tweetnaclhl.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box__pk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant pk [#"tweetnaclhl.ads" 19 0 0][@model_projected] [@model_trace:14209] [@name:pk] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pk" defined at tweetnaclhl.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box__pk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "sk" defined at tweetnaclhl.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box__sk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant sk [#"tweetnaclhl.ads" 20 0 0][@name:sk] [@model_trace:14218] [@model_projected] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sk" defined at tweetnaclhl.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box__sk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "c" defined at tweetnaclhl.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box_open__c
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__ciphertext as Tweetnacl_h__ciphertext

 val constant c [#"tweetnaclhl.ads" 27 0 0][@model_trace:14282] [@name:c] [@model_projected] 
   : Tweetnacl_h__ciphertext.ciphertext

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at tweetnaclhl.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_open__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "n" defined at tweetnaclhl.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box_open__n
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant n [#"tweetnaclhl.ads" 28 0 0][@name:n] [@model_projected] [@model_trace:14291] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at tweetnaclhl.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_open__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pk" defined at tweetnaclhl.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box_open__pk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant pk [#"tweetnaclhl.ads" 29 0 0][@model_projected] [@model_trace:14300] [@name:pk] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pk" defined at tweetnaclhl.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_open__pk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "sk" defined at tweetnaclhl.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_box_open__sk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant sk [#"tweetnaclhl.ads" 30 0 0][@name:sk] [@model_projected] [@model_trace:14309] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sk" defined at tweetnaclhl.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_open__sk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3b" defined at test.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Test__L_1__T3b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep

 type t3b =
  Tweetnacl_h__Tu64B.tu64B
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function base_of_rep = Tweetnacl_h__Tu64B__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content : t3b }
 
 function t3b__ref_t3b__content__projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref_t3b__content__projection
 
 meta "inline:no" function t3b__ref_t3b__content__projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at test.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Test__L_1__T4b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:509, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 509 0 0][@name:Item] [@model_projected] [@model_trace:9167] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:509, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "sm" defined at tweetnaclhl.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_sign_open__sm
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext

 val constant sm [#"tweetnaclhl.ads" 50 0 0][@name:sm] [@model_trace:14474] [@model_projected] 
   : Tweetnacl_h__plaintext.plaintext

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sm" defined at tweetnaclhl.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign_open__sm___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "pk" defined at tweetnaclhl.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Tweetnaclhl__crypto_sign_open__pk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val constant pk [#"tweetnaclhl.ads" 51 0 0][@model_projected] [@name:pk] [@model_trace:14483] 
   : Array__Int__Tweetnacl_h__u8.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pk" defined at tweetnaclhl.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign_open__pk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T5b" defined at test.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Test__L_2__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep

 type t5b =
  Tweetnacl_h__Tu64B.tu64B
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Tweetnacl_h__Tu64B__rep.to_rep, 
 function base_of_rep = Tweetnacl_h__Tu64B__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content : t5b }
 
 function t5b__ref_t5b__content__projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref_t5b__content__projection
 
 meta "inline:no" function t5b__ref_t5b__content__projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at test.adb:37, created in Gnat2Why.Types.Translate_Type *)
module Test__L_2__T6b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (48 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "csk" defined at test.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Test__csk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val csk [#"test.adb" 10 0 0][@name:csk] [@model_projected] [@model_trace:2333]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "csk" defined at test.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__csk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "cpk" defined at test.adb:11, created in Gnat2Why.Decls.Translate_Variable *)
module Test__cpk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val cpk [#"test.adb" 11 0 0][@model_projected] [@model_trace:2342] [@name:cpk]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "cpk" defined at test.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__cpk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ssk" defined at test.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module Test__ssk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val ssk [#"test.adb" 12 0 0][@name:ssk] [@model_trace:2351] [@model_projected]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ssk" defined at test.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__ssk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "spk" defined at test.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Test__spk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val spk [#"test.adb" 13 0 0][@name:spk] [@model_projected] [@model_trace:2360]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "spk" defined at test.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__spk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "n" defined at test.adb:14, created in Gnat2Why.Decls.Translate_Variable *)
module Test__n
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val n [#"test.adb" 14 0 0][@model_trace:2369] [@name:n] [@model_projected]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "n" defined at test.adb:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at test.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Test__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val m [#"test.adb" 15 0 0][@name:m] [@model_projected] [@model_trace:2378]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant m__first [#"test.adb" 15 0 0][@name:m] [@model_projected] [@model_trace:2378'First] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant m__last [#"test.adb" 15 0 0][@model_trace:2378'Last] [@name:m] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at test.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "sm" defined at test.adb:16, created in Gnat2Why.Decls.Translate_Variable *)
module Test__sm
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val sm [#"test.adb" 16 0 0][@name:sm] [@model_projected] [@model_trace:2425]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant sm__first [#"test.adb" 16 0 0][@name:sm] [@model_projected] [@model_trace:2425'First] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant sm__last [#"test.adb" 16 0 0][@name:sm] [@model_trace:2425'Last] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sm" defined at test.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__sm___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "c" defined at test.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Test__c
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val c [#"test.adb" 17 0 0][@model_trace:2445] [@name:c] [@model_projected]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant c__first [#"test.adb" 17 0 0][@model_trace:2445'First] [@name:c] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant c__last [#"test.adb" 17 0 0][@name:c] [@model_projected] [@model_trace:2445'Last] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at test.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "smu" defined at test.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Test__smu
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val smu [#"test.adb" 18 0 0][@name:smu] [@model_projected] [@model_trace:2465]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant smu__first [#"test.adb" 18 0 0][@name:smu] [@model_projected] [@model_trace:2465'First] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant smu__last [#"test.adb" 18 0 0][@name:smu] [@model_projected] [@model_trace:2465'Last] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "smu" defined at test.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__smu___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "mu" defined at test.adb:19, created in Gnat2Why.Decls.Translate_Variable *)
module Test__mu
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val mu [#"test.adb" 19 0 0][@model_projected] [@name:mu] [@model_trace:2485]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant mu__first [#"test.adb" 19 0 0][@model_projected] [@model_trace:2485'First] [@name:mu] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant mu__last [#"test.adb" 19 0 0][@model_projected] [@model_trace:2485'Last] [@name:mu] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "mu" defined at test.adb:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__mu___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pk" defined at tweetnaclhl.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_box_keypair__pk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val pk [#"tweetnaclhl.ads" 35 0 0][@model_trace:14360] [@model_projected] [@name:pk]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pk" defined at tweetnaclhl.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_keypair__pk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "sk" defined at tweetnaclhl.ads:35, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_box_keypair__sk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val sk [#"tweetnaclhl.ads" 35 0 0][@name:sk] [@model_trace:14369] [@model_projected]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sk" defined at tweetnaclhl.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_keypair__sk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pk" defined at tweetnaclhl.ads:55, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_sign_keypair__pk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val pk [#"tweetnaclhl.ads" 55 0 0][@model_trace:14526] [@model_projected] [@name:pk]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pk" defined at tweetnaclhl.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign_keypair__pk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "sk" defined at tweetnaclhl.ads:55, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_sign_keypair__sk
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val sk [#"tweetnaclhl.ads" 55 0 0][@name:sk] [@model_projected] [@model_trace:14535]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sk" defined at tweetnaclhl.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign_keypair__sk___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "sm" defined at tweetnaclhl.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_sign__sm
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val sm [#"tweetnaclhl.ads" 40 0 0][@name:sm] [@model_trace:14402] [@model_projected]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant sm__first [#"tweetnaclhl.ads" 40 0 0][@name:sm] [@model_projected] [@model_trace:14402'First] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant sm__last [#"tweetnaclhl.ads" 40 0 0][@name:sm] [@model_projected] [@model_trace:14402'Last] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sm" defined at tweetnaclhl.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign__sm___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "x" defined at tweetnaclhl.ads:64, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__randombytes__2__x
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val x [#"tweetnaclhl.ads" 64 0 0][@model_trace:14591] [@model_projected] [@name:x]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "x" defined at tweetnaclhl.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__randombytes__2__x___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "c" defined at tweetnaclhl.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_box__c
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val c [#"tweetnaclhl.ads" 16 0 0][@name:c] [@model_projected] [@model_trace:14182]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant c__first [#"tweetnaclhl.ads" 16 0 0][@model_trace:14182'First] [@name:c] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant c__last [#"tweetnaclhl.ads" 16 0 0][@name:c] [@model_projected] [@model_trace:14182'Last] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at tweetnaclhl.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "sm" defined at tweetnaclhl.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_box_open__sm
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val sm [#"tweetnaclhl.ads" 26 0 0][@name:sm] [@model_trace:14273] [@model_projected]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant sm__first [#"tweetnaclhl.ads" 26 0 0][@name:sm] [@model_trace:14273'First] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant sm__last [#"tweetnaclhl.ads" 26 0 0][@model_trace:14273'Last] [@name:sm] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "sm" defined at tweetnaclhl.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_box_open__sm___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at test.adb:29, created in Gnat2Why.Decls.Translate_Variable *)
module Test__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"test.adb" 29 0 0][@name:i] [@model_projected] [@model_trace:2536]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at test.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at tweetnaclhl.ads:49, created in Gnat2Why.Decls.Translate_Variable *)
module Tweetnaclhl__crypto_sign_open__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val m [#"tweetnaclhl.ads" 49 0 0][@name:m] [@model_projected] [@model_trace:14465]  : Array__Int__Tweetnacl_h__u8.map__ref 
 
 val constant m__first [#"tweetnaclhl.ads" 49 0 0][@model_trace:14465'First] [@name:m] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant m__last [#"tweetnaclhl.ads" 49 0 0][@model_trace:14465'Last] [@name:m] [@model_projected] 
   : Tweetnacl_h__Tu64B.tu64B

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at tweetnaclhl.ads:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tweetnaclhl__crypto_sign_open__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at test.adb:35, created in Gnat2Why.Decls.Translate_Variable *)
module Test__L_2__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"test.adb" 35 0 0][@name:i] [@model_projected] [@model_trace:2572]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at test.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__L_2__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "test" defined at test.adb:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Test
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "crypto_box_keypair" defined at tweetnaclhl.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__crypto_box_keypair
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "crypto_sign_keypair" defined at tweetnaclhl.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__crypto_sign_keypair
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "crypto_sign" defined at tweetnaclhl.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__crypto_sign
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "randombytes__2" defined at tweetnaclhl.ads:64, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__randombytes__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "crypto_box" defined at tweetnaclhl.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__crypto_box
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "crypto_box_open" defined at tweetnaclhl.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__crypto_box_open
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at test.adb:29, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Test__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at test.adb:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "crypto_sign_open" defined at tweetnaclhl.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tweetnaclhl__crypto_sign_open
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at test.adb:35, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Test__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at test.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Test__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) =
  (if (( temp___is_init_163 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_167)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_168 : int) (temp___skip_top_level_169 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) =
  (if (( temp___is_init_170 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_174)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_175 : int) (temp___skip_top_level_176 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:109, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  (if (( temp___is_init_177 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_181)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_182 : int) (temp___skip_top_level_183 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:110, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) =
  (if (( temp___is_init_184 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_188)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_188 : int) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_189 : int) (temp___skip_top_level_190 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_189 : int) (temp___skip_top_level_190 : bool) }

end

(* Module giving axioms for type "Tindex32B" defined at tweetnacl_h.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__Tindex32B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "index32" defined at tweetnacl_h.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__index32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__index32 as Tweetnacl_h__index32

 predicate dynamic_invariant [@inline] 
   (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) =
  (if (( temp___is_init_191 \/ (Tweetnacl_h__index32.first <= Tweetnacl_h__index32.last) )) then (
   (Tweetnacl_h__index32.dynamic_property Tweetnacl_h__index32.first Tweetnacl_h__index32.last temp___expr_195)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_195 : int) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_196 : int) (temp___skip_top_level_197 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_196 : int) (temp___skip_top_level_197 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_196 : int) (temp___skip_top_level_197 : bool) }

end

(* Module giving axioms for type "u8" defined at tweetnacl_h.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__u8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".BV8 as BV8
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8

 predicate dynamic_invariant [@inline] 
   (temp___expr_202 : BV8.t) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) =
  (if (( temp___is_init_198 \/ (BV8.ule Tweetnacl_h__u8.first Tweetnacl_h__u8.last) )) then (
   (Tweetnacl_h__u8.dynamic_property Tweetnacl_h__u8.first Tweetnacl_h__u8.last temp___expr_202)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_202 : BV8.t) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_202 : BV8.t) (temp___is_init_198 : bool) (temp___skip_constant_199 : bool) (temp___do_toplevel_200 : bool) (temp___do_typ_inv_201 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_203 : BV8.t) (temp___skip_top_level_204 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_203 : BV8.t) (temp___skip_top_level_204 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_203 : BV8.t) (temp___skip_top_level_204 : bool) }

end

(* Module giving axioms for type "TkeyB" defined at tweetnacl_h.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__TkeyB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "key" defined at tweetnacl_h.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__key___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_209 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_211 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_212 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_211 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_212 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_211 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_212 : bool) }

end

(* Module giving axioms for type "Tindex64B" defined at tweetnacl_h.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__Tindex64B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "index64" defined at tweetnacl_h.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__index64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__index64 as Tweetnacl_h__index64

 predicate dynamic_invariant [@inline] 
   (temp___expr_219 : int) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool) =
  (if (( temp___is_init_215 \/ (Tweetnacl_h__index64.first <= Tweetnacl_h__index64.last) )) then (
   (Tweetnacl_h__index64.dynamic_property Tweetnacl_h__index64.first Tweetnacl_h__index64.last temp___expr_219)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_219 : int) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_219 : int) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_220 : int) (temp___skip_top_level_221 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_220 : int) (temp___skip_top_level_221 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_220 : int) (temp___skip_top_level_221 : bool) }

end

(* Module giving axioms for type "Tkey64B" defined at tweetnacl_h.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__Tkey64B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "key64" defined at tweetnacl_h.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__key64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 predicate dynamic_invariant [@inline] 
   (temp___expr_226 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_222 : bool) (temp___skip_constant_223 : bool) (temp___do_toplevel_224 : bool) (temp___do_typ_inv_225 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_226 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_222 : bool) (temp___skip_constant_223 : bool) (temp___do_toplevel_224 : bool) (temp___do_typ_inv_225 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_226 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_222 : bool) (temp___skip_constant_223 : bool) (temp___do_toplevel_224 : bool) (temp___do_typ_inv_225 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_228 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_229 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_228 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_229 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_228 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_229 : bool) }

end

(* Module giving axioms for type "Tindex24B" defined at tweetnacl_h.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__Tindex24B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "index24" defined at tweetnacl_h.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__index24___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__index24 as Tweetnacl_h__index24

 predicate dynamic_invariant [@inline] 
   (temp___expr_236 : int) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) =
  (if (( temp___is_init_232 \/ (Tweetnacl_h__index24.first <= Tweetnacl_h__index24.last) )) then (
   (Tweetnacl_h__index24.dynamic_property Tweetnacl_h__index24.first Tweetnacl_h__index24.last temp___expr_236)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_236 : int) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_236 : int) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_237 : int) (temp___skip_top_level_238 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_237 : int) (temp___skip_top_level_238 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_237 : int) (temp___skip_top_level_238 : bool) }

end

(* Module giving axioms for type "TnonceB" defined at tweetnacl_h.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__TnonceB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "nonce" defined at tweetnacl_h.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__nonce___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 predicate dynamic_invariant [@inline] 
   (temp___expr_243 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_243 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_243 : Array__Int__Tweetnacl_h__u8.map) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_245 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_246 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_245 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_246 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_245 : Array__Int__Tweetnacl_h__u8.map) (temp___skip_top_level_246 : bool) }

end

(* Module giving axioms for type "Tu64B" defined at tweetnacl_h.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__Tu64B___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "u64" defined at tweetnacl_h.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__u64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__u64 as Tweetnacl_h__u64

 predicate dynamic_invariant [@inline] 
   (temp___expr_253 : int) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) =
  (if (( temp___is_init_249 \/ (Tweetnacl_h__u64.first <= Tweetnacl_h__u64.last) )) then (
   (Tweetnacl_h__u64.dynamic_property Tweetnacl_h__u64.first Tweetnacl_h__u64.last temp___expr_253)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_253 : int) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_253 : int) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool) (temp___do_typ_inv_252 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_254 : int) (temp___skip_top_level_255 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_254 : int) (temp___skip_top_level_255 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_254 : int) (temp___skip_top_level_255 : bool) }

end

(* Module giving axioms for type "index" defined at tweetnacl_h.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnacl_h__index as Tweetnacl_h__index

 predicate dynamic_invariant [@inline] 
   (temp___expr_260 : int) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) =
  (if (( temp___is_init_256 \/ (Tweetnacl_h__index.first <= Tweetnacl_h__index.last) )) then (
   (Tweetnacl_h__index.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last temp___expr_260)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_260 : int) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_260 : int) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_261 : int) (temp___skip_top_level_262 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_261 : int) (temp___skip_top_level_262 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_261 : int) (temp___skip_top_level_262 : bool) }

end

(* Module giving axioms for type "plaintext" defined at tweetnacl_h.ads:28, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__plaintext___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnacl_h__index as Tweetnacl_h__index

 predicate dynamic_invariant [@inline] 
   (temp___expr_267 : Tweetnacl_h__plaintext.plaintext) (temp___is_init_263 : bool) (temp___skip_constant_264 : bool) (temp___do_toplevel_265 : bool) (temp___do_typ_inv_266 : bool) =
  (if (temp___skip_constant_264) then (
   true) else (
   (Tweetnacl_h__plaintext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__plaintext.first temp___expr_267) (Tweetnacl_h__plaintext.last temp___expr_267))))
 val dynamic_invariant [@inline] 
   (temp___expr_267 : Tweetnacl_h__plaintext.plaintext) (temp___is_init_263 : bool) (temp___skip_constant_264 : bool) (temp___do_toplevel_265 : bool) (temp___do_typ_inv_266 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_267 : Tweetnacl_h__plaintext.plaintext) (temp___is_init_263 : bool) (temp___skip_constant_264 : bool) (temp___do_toplevel_265 : bool) (temp___do_typ_inv_266 : bool) }

end

(* Module giving axioms for type "T1b" defined at test.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__T1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T2b" defined at test.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__T2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTsmSP1" defined at test.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TTsmSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TsmS" defined at test.adb:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TsmS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Test__m as Test__m
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Test__TsmS as Test__TsmS

 predicate dynamic_invariant [@inline] 
   (temp___expr_273 : Test__TsmS.tsmS) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) =
  (if (temp___skip_constant_270) then (
   true) else (
   ( (Test__TsmS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int)) (Test__TsmS.first temp___expr_273) (Test__TsmS.last temp___expr_273)) /\ ( ((Test__TsmS.first temp___expr_273) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) /\ ((Test__TsmS.last temp___expr_273) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_273 : Test__TsmS.tsmS) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_273 : Test__TsmS.tsmS) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_275 : Test__TsmS.tsmS) (temp___skip_top_level_276 : bool) =
  ( ( true /\ ((Test__TsmS.first temp___expr_275) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) )/\((Test__TsmS.last temp___expr_275) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) )
 val default_initial_assumption [@inline] 
   (temp___expr_275 : Test__TsmS.tsmS) (temp___skip_top_level_276 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_275 : Test__TsmS.tsmS) (temp___skip_top_level_276 : bool) }

end

(* Module giving axioms for type "ciphertext" defined at tweetnacl_h.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tweetnacl_h__ciphertext___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__ciphertext as Tweetnacl_h__ciphertext
 use        Tweetnacl_h__index as Tweetnacl_h__index

 predicate dynamic_invariant [@inline] 
   (temp___expr_283 : Tweetnacl_h__ciphertext.ciphertext) (temp___is_init_279 : bool) (temp___skip_constant_280 : bool) (temp___do_toplevel_281 : bool) (temp___do_typ_inv_282 : bool) =
  (if (temp___skip_constant_280) then (
   true) else (
   (Tweetnacl_h__ciphertext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__ciphertext.first temp___expr_283) (Tweetnacl_h__ciphertext.last temp___expr_283))))
 val dynamic_invariant [@inline] 
   (temp___expr_283 : Tweetnacl_h__ciphertext.ciphertext) (temp___is_init_279 : bool) (temp___skip_constant_280 : bool) (temp___do_toplevel_281 : bool) (temp___do_typ_inv_282 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_283 : Tweetnacl_h__ciphertext.ciphertext) (temp___is_init_279 : bool) (temp___skip_constant_280 : bool) (temp___do_toplevel_281 : bool) (temp___do_typ_inv_282 : bool) }

end

(* Module giving axioms for type "TTcSP1" defined at test.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TTcSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcS" defined at test.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TcS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Test__sm as Test__sm
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Test__TcS as Test__TcS

 predicate dynamic_invariant [@inline] 
   (temp___expr_289 : Test__TcS.tcS) (temp___is_init_285 : bool) (temp___skip_constant_286 : bool) (temp___do_toplevel_287 : bool) (temp___do_typ_inv_288 : bool) =
  (if (temp___skip_constant_286) then (
   true) else (
   ( (Test__TcS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int)) (Test__TcS.first temp___expr_289) (Test__TcS.last temp___expr_289)) /\ ( ((Test__TcS.first temp___expr_289) = (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first)) /\ ((Test__TcS.last temp___expr_289) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int))) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_289 : Test__TcS.tcS) (temp___is_init_285 : bool) (temp___skip_constant_286 : bool) (temp___do_toplevel_287 : bool) (temp___do_typ_inv_288 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_289 : Test__TcS.tcS) (temp___is_init_285 : bool) (temp___skip_constant_286 : bool) (temp___do_toplevel_287 : bool) (temp___do_typ_inv_288 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_291 : Test__TcS.tcS) (temp___skip_top_level_292 : bool) =
  ( ( true /\ ((Test__TcS.first temp___expr_291) = (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first)) )/\((Test__TcS.last temp___expr_291) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int))) )
 val default_initial_assumption [@inline] 
   (temp___expr_291 : Test__TcS.tcS) (temp___skip_top_level_292 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_291 : Test__TcS.tcS) (temp___skip_top_level_292 : bool) }

end

(* Module giving axioms for type "TTsmuSP1" defined at test.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TTsmuSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TsmuS" defined at test.adb:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TsmuS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Test__m as Test__m
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Test__TsmuS as Test__TsmuS

 predicate dynamic_invariant [@inline] 
   (temp___expr_299 : Test__TsmuS.tsmuS) (temp___is_init_295 : bool) (temp___skip_constant_296 : bool) (temp___do_toplevel_297 : bool) (temp___do_typ_inv_298 : bool) =
  (if (temp___skip_constant_296) then (
   true) else (
   ( (Test__TsmuS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int)) (Test__TsmuS.first temp___expr_299) (Test__TsmuS.last temp___expr_299)) /\ ( ((Test__TsmuS.first temp___expr_299) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) /\ ((Test__TsmuS.last temp___expr_299) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_299 : Test__TsmuS.tsmuS) (temp___is_init_295 : bool) (temp___skip_constant_296 : bool) (temp___do_toplevel_297 : bool) (temp___do_typ_inv_298 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_299 : Test__TsmuS.tsmuS) (temp___is_init_295 : bool) (temp___skip_constant_296 : bool) (temp___do_toplevel_297 : bool) (temp___do_typ_inv_298 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_301 : Test__TsmuS.tsmuS) (temp___skip_top_level_302 : bool) =
  ( ( true /\ ((Test__TsmuS.first temp___expr_301) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) )/\((Test__TsmuS.last temp___expr_301) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) )
 val default_initial_assumption [@inline] 
   (temp___expr_301 : Test__TsmuS.tsmuS) (temp___skip_top_level_302 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_301 : Test__TsmuS.tsmuS) (temp___skip_top_level_302 : bool) }

end

(* Module giving axioms for type "TTmuSP1" defined at test.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TTmuSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmuS" defined at test.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__TmuS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Test__m as Test__m
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Test__TmuS as Test__TmuS

 predicate dynamic_invariant [@inline] 
   (temp___expr_309 : Test__TmuS.tmuS) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool) (temp___do_typ_inv_308 : bool) =
  (if (temp___skip_constant_306) then (
   true) else (
   ( (Test__TmuS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) (Test__TmuS.first temp___expr_309) (Test__TmuS.last temp___expr_309)) /\ ( ((Test__TmuS.first temp___expr_309) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) /\ ((Test__TmuS.last temp___expr_309) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_309 : Test__TmuS.tmuS) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool) (temp___do_typ_inv_308 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_309 : Test__TmuS.tmuS) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool) (temp___do_typ_inv_308 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_311 : Test__TmuS.tmuS) (temp___skip_top_level_312 : bool) =
  ( ( true /\ ((Test__TmuS.first temp___expr_311) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) )/\((Test__TmuS.last temp___expr_311) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)) )
 val default_initial_assumption [@inline] 
   (temp___expr_311 : Test__TmuS.tmuS) (temp___skip_top_level_312 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_311 : Test__TmuS.tmuS) (temp___skip_top_level_312 : bool) }

end

(* Module giving axioms for type "TintB" defined at i-c.ads:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c__TintB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "int" defined at i-c.ads:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c__int___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Interfaces__c__int as Interfaces__c__int

 predicate dynamic_invariant [@inline] 
   (temp___expr_319 : int) (temp___is_init_315 : bool) (temp___skip_constant_316 : bool) (temp___do_toplevel_317 : bool) (temp___do_typ_inv_318 : bool) =
  (if (( temp___is_init_315 \/ (Interfaces__c__int.first <= Interfaces__c__int.last) )) then (
   (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last temp___expr_319)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_319 : int) (temp___is_init_315 : bool) (temp___skip_constant_316 : bool) (temp___do_toplevel_317 : bool) (temp___do_typ_inv_318 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_319 : int) (temp___is_init_315 : bool) (temp___skip_constant_316 : bool) (temp___do_toplevel_317 : bool) (temp___do_typ_inv_318 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_320 : int) (temp___skip_top_level_321 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_320 : int) (temp___skip_top_level_321 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_320 : int) (temp___skip_top_level_321 : bool) }

end

(* Module giving axioms for type "T3b" defined at test.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__L_1__T3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T4b" defined at test.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__L_1__T4b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T5b" defined at test.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__L_2__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T6b" defined at test.adb:37, created in Gnat2Why.Types.Generate_Type_Completion *)
module Test__L_2__T6b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at test.adb:15, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Test__m__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".BV8 as BV8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val function test__m__aggregate_def 
   (temp___371 : BV8.t) (temp___372 : BV8.t) (temp___373 : BV8.t) (temp___374 : BV8.t) (temp___375 : BV8.t) (temp___376 : BV8.t) (temp___377 : BV8.t) (temp___378 : BV8.t) (temp___379 : BV8.t) (temp___380 : BV8.t) (temp___381 : BV8.t) (temp___382 : BV8.t) (temp___383 : BV8.t) (temp___384 : BV8.t) (temp___385 : BV8.t) (temp___386 : BV8.t) (temp___387 : BV8.t) (temp___388 : BV8.t) (temp___389 : BV8.t) (temp___390 : BV8.t) (temp___391 : BV8.t) (temp___392 : BV8.t) (temp___393 : BV8.t) (temp___394 : BV8.t) (temp___395 : BV8.t) (temp___396 : BV8.t) (temp___397 : BV8.t) (temp___398 : BV8.t) (temp___399 : BV8.t) (temp___400 : BV8.t) (temp___401 : BV8.t) (temp___402 : BV8.t) (temp___403 : BV8.t) (temp___404 : BV8.t) (temp___405 : BV8.t) (temp___406 : BV8.t) (temp___407 : BV8.t) : Array__Int__Tweetnacl_h__u8.map

end

(* Module for defining a value for string literal  defined at test.adb:31, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_420
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_420 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_420__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_420 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (1 : int))) = (101 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (5 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (6 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (8 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (9 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (10 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (11 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (12 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (13 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (14 : int))) = (110 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (15 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (16 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (17 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (18 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (19 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (20 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (21 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (22 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (23 : int))) = (103 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (25 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (26 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (27 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (28 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (29 : int))) = (102 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (30 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (31 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (32 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (33 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (34 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (35 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (36 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (37 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (38 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (39 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (40 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (41 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (42 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (43 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (44 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (45 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (46 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (47 : int))) = (108 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (48 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (49 : int))) = (115 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (50 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (51 : int))) = (103 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (52 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (53 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (54 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (55 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (56 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (57 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (58 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (59 : int))) = (115 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (60 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (61 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (62 : int))) = (101 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at test.adb:37, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_423
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_423 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_423__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_423 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (1 : int))) = (101 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (2 : int))) = (114 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (3 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (4 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (5 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (6 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (7 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (8 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (9 : int))) = (119 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (10 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (11 : int))) = (109 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (12 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (13 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (14 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (15 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (16 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (17 : int))) = (101 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (19 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (20 : int))) = (105 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (21 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (22 : int))) = (102 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (23 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (24 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (25 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (26 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (27 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (28 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (29 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (30 : int))) = (104 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (31 : int))) = (97 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (32 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (33 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (34 : int))) = (105 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (35 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (36 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (37 : int))) = (116 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (38 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (39 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (40 : int))) = (108 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (41 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (42 : int))) = (109 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (43 : int))) = (101 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (44 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (45 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (46 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (47 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_423 __void_param) (48 : int))) = (101 : int)) ) ) ) ) ) ))

end
(* Module for defining the value of constant "default_priority" defined at system.ads:112, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (48 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "test" defined at test.adb:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Test___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val test 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "isboxpublickey" defined at tweetnaclhl.ads:188, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__isboxpublickey___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnaclhl__isboxpublickey as Tweetnaclhl__isboxpublickey
 use        Interfaces__c__int as Interfaces__c__int
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val isboxpublickey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
  requires {  true }
  ensures {  ( ( (result = (Tweetnaclhl__isboxpublickey.isboxpublickey k)) /\ (Tweetnaclhl__isboxpublickey.isboxpublickey__function_guard result k) )/\(Interfaces__c__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom isboxpublickey__post_axiom :
  (forall k   : Array__Int__Tweetnacl_h__u8.map [(Tweetnaclhl__isboxpublickey.isboxpublickey k)].
   (let result = (Tweetnaclhl__isboxpublickey.isboxpublickey k) in (
    (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "isboxsecretkey" defined at tweetnaclhl.ads:190, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__isboxsecretkey___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnaclhl__isboxsecretkey as Tweetnaclhl__isboxsecretkey
 use        Interfaces__c__int as Interfaces__c__int
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val isboxsecretkey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
  requires {  true }
  ensures {  ( ( (result = (Tweetnaclhl__isboxsecretkey.isboxsecretkey k)) /\ (Tweetnaclhl__isboxsecretkey.isboxsecretkey__function_guard result k) )/\(Interfaces__c__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom isboxsecretkey__post_axiom :
  (forall k   : Array__Int__Tweetnacl_h__u8.map [(Tweetnaclhl__isboxsecretkey.isboxsecretkey k)].
   (let result = (Tweetnaclhl__isboxsecretkey.isboxsecretkey k) in (
    (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "crypto_box_keypair" defined at tweetnaclhl.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__crypto_box_keypair___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnaclhl__isboxpublickey as Tweetnaclhl__isboxpublickey
 use        Tweetnaclhl__isboxsecretkey as Tweetnaclhl__isboxsecretkey
 use        Tweetnacl_h__key___axiom as Tweetnacl_h__key___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val crypto_box_keypair 
   (pk : Array__Int__Tweetnacl_h__u8.map__ref) (sk : Array__Int__Tweetnacl_h__u8.map__ref) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:14388] ((epsilon temp___result_324 : int.
   ( (temp___result_324 = (Tweetnaclhl__isboxpublickey.isboxpublickey pk.Array__Int__Tweetnacl_h__u8.map__content)) /\ (Tweetnaclhl__isboxpublickey.isboxpublickey__function_guard temp___result_324 pk.Array__Int__Tweetnacl_h__u8.map__content) )) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:14394] ((epsilon temp___result_325 : int.
   ( (temp___result_325 = (Tweetnaclhl__isboxsecretkey.isboxsecretkey sk.Array__Int__Tweetnacl_h__u8.map__content)) /\ (Tweetnaclhl__isboxsecretkey.isboxsecretkey__function_guard temp___result_325 sk.Array__Int__Tweetnacl_h__u8.map__content) )) = (0 : int)) ) ) /\ ( (Tweetnacl_h__key___axiom.dynamic_invariant pk.Array__Int__Tweetnacl_h__u8.map__content True True True True) /\ (Tweetnacl_h__key___axiom.dynamic_invariant sk.Array__Int__Tweetnacl_h__u8.map__content True True True True) ) ) }
  writes {pk, sk}

end

(* Module for declaring a program function (and possibly an axiom) for "issignpublickey" defined at tweetnaclhl.ads:191, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__issignpublickey___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnaclhl__issignpublickey as Tweetnaclhl__issignpublickey
 use        Interfaces__c__int as Interfaces__c__int
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val issignpublickey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
  requires {  true }
  ensures {  ( ( (result = (Tweetnaclhl__issignpublickey.issignpublickey k)) /\ (Tweetnaclhl__issignpublickey.issignpublickey__function_guard result k) )/\(Interfaces__c__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom issignpublickey__post_axiom :
  (forall k   : Array__Int__Tweetnacl_h__u8.map [(Tweetnaclhl__issignpublickey.issignpublickey k)].
   (let result = (Tweetnaclhl__issignpublickey.issignpublickey k) in (
    (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "issignsecretkey" defined at tweetnaclhl.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__issignsecretkey___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnaclhl__issignsecretkey as Tweetnaclhl__issignsecretkey
 use        Interfaces__c__int as Interfaces__c__int
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val issignsecretkey 
   (k : Array__Int__Tweetnacl_h__u8.map) : int
  requires {  true }
  ensures {  ( ( (result = (Tweetnaclhl__issignsecretkey.issignsecretkey k)) /\ (Tweetnaclhl__issignsecretkey.issignsecretkey__function_guard result k) )/\(Interfaces__c__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom issignsecretkey__post_axiom :
  (forall k   : Array__Int__Tweetnacl_h__u8.map [(Tweetnaclhl__issignsecretkey.issignsecretkey k)].
   (let result = (Tweetnaclhl__issignsecretkey.issignsecretkey k) in (
    (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "crypto_sign_keypair" defined at tweetnaclhl.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__crypto_sign_keypair___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnaclhl__issignpublickey as Tweetnaclhl__issignpublickey
 use        Tweetnaclhl__issignsecretkey as Tweetnaclhl__issignsecretkey
 use        Tweetnacl_h__key___axiom as Tweetnacl_h__key___axiom
 use        Tweetnacl_h__key64___axiom as Tweetnacl_h__key64___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val crypto_sign_keypair 
   (pk : Array__Int__Tweetnacl_h__u8.map__ref) (sk : Array__Int__Tweetnacl_h__u8.map__ref) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:14554] ((epsilon temp___result_330 : int.
   ( (temp___result_330 = (Tweetnaclhl__issignpublickey.issignpublickey pk.Array__Int__Tweetnacl_h__u8.map__content)) /\ (Tweetnaclhl__issignpublickey.issignpublickey__function_guard temp___result_330 pk.Array__Int__Tweetnacl_h__u8.map__content) )) = (0 : int)) ) /\ ( [@GP_Pretty_Ada:14560] ((epsilon temp___result_331 : int.
   ( (temp___result_331 = (Tweetnaclhl__issignsecretkey.issignsecretkey sk.Array__Int__Tweetnacl_h__u8.map__content)) /\ (Tweetnaclhl__issignsecretkey.issignsecretkey__function_guard temp___result_331 sk.Array__Int__Tweetnacl_h__u8.map__content) )) = (0 : int)) ) ) /\ ( (Tweetnacl_h__key___axiom.dynamic_invariant pk.Array__Int__Tweetnacl_h__u8.map__content True True True True) /\ (Tweetnacl_h__key64___axiom.dynamic_invariant sk.Array__Int__Tweetnacl_h__u8.map__content True True True True) ) ) }
  writes {pk, sk}

end

(* Module for declaring a program function (and possibly an axiom) for "issigned" defined at tweetnaclhl.ads:193, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__issigned___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnaclhl__issigned as Tweetnaclhl__issigned
 use        Interfaces__c__int as Interfaces__c__int
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom

 val issigned 
   (m : Tweetnacl_h__plaintext.plaintext) : int
  requires {  true }
  ensures {  ( ( (result = (Tweetnaclhl__issigned.issigned m)) /\ (Tweetnaclhl__issigned.issigned__function_guard result m) )/\(Interfaces__c__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom issigned__post_axiom :
  (forall m   : Tweetnacl_h__plaintext.plaintext [(Tweetnaclhl__issigned.issigned m)].
   (let result = (Tweetnaclhl__issigned.issigned m) in (
    (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "crypto_sign" defined at tweetnaclhl.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__crypto_sign___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnaclhl__issignsecretkey as Tweetnaclhl__issignsecretkey
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnaclhl__issigned as Tweetnaclhl__issigned
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val crypto_sign 
   (sm : Array__Int__Tweetnacl_h__u8.map__ref) (sm__first : Tweetnacl_h__Tu64B.tu64B) (sm__last : Tweetnacl_h__Tu64B.tu64B) (m : Tweetnacl_h__plaintext.plaintext) (k : Array__Int__Tweetnacl_h__u8.map) : unit
  requires {  ( ( [@GP_Pretty_Ada:14439] ((Integer.length (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last)) = ((Tweetnacl_h__plaintext.length m) + (64 : int))) ) /\ ( [@GP_Pretty_Ada:14449] ((epsilon temp___result_335 : int.
   ( (temp___result_335 = (Tweetnaclhl__issignsecretkey.issignsecretkey k)) /\ (Tweetnaclhl__issignsecretkey.issignsecretkey__function_guard temp___result_335 k) )) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:28829] ((epsilon temp___result_336 : int.
   ( (temp___result_336 = (Tweetnaclhl__issigned.issigned (Tweetnacl_h__plaintext.of_array sm.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last)))) /\ (Tweetnaclhl__issigned.issigned__function_guard temp___result_336 (Tweetnacl_h__plaintext.of_array sm.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last))) )) = (0 : int)) ) /\ (if (True) then (
   true) else (
   (Tweetnacl_h__plaintext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last)))) ) }
  writes {sm}

end

(* Module for declaring a program function (and possibly an axiom) for "neverusedyet" defined at tweetnaclhl.ads:194, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__neverusedyet___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Tweetnaclhl__neverusedyet as Tweetnaclhl__neverusedyet
 use        Interfaces__c__int as Interfaces__c__int
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val neverusedyet 
   (n : Array__Int__Tweetnacl_h__u8.map) : int
  requires {  true }
  ensures {  ( ( (result = (Tweetnaclhl__neverusedyet.neverusedyet n)) /\ (Tweetnaclhl__neverusedyet.neverusedyet__function_guard result n) )/\(Interfaces__c__int___axiom.dynamic_invariant result True False True True) ) }
 
 axiom neverusedyet__post_axiom :
  (forall n   : Array__Int__Tweetnacl_h__u8.map [(Tweetnaclhl__neverusedyet.neverusedyet n)].
   (let result = (Tweetnaclhl__neverusedyet.neverusedyet n) in (
    (Interfaces__c__int.dynamic_property Interfaces__c__int.first Interfaces__c__int.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "randombytes__2" defined at tweetnaclhl.ads:64, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__randombytes__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Tweetnaclhl__neverusedyet as Tweetnaclhl__neverusedyet
 use        Tweetnacl_h__nonce___axiom as Tweetnacl_h__nonce___axiom
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val randombytes__2 
   (x : Array__Int__Tweetnacl_h__u8.map__ref) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:28923] ((epsilon temp___result_342 : int.
   ( (temp___result_342 = (Tweetnaclhl__neverusedyet.neverusedyet x.Array__Int__Tweetnacl_h__u8.map__content)) /\ (Tweetnaclhl__neverusedyet.neverusedyet__function_guard temp___result_342 x.Array__Int__Tweetnacl_h__u8.map__content) )) = (0 : int)) ) /\ (Tweetnacl_h__nonce___axiom.dynamic_invariant x.Array__Int__Tweetnacl_h__u8.map__content True True True True) ) }
  writes {x}

end

(* Module for declaring a program function (and possibly an axiom) for "crypto_box" defined at tweetnaclhl.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__crypto_box___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnaclhl__isboxpublickey as Tweetnaclhl__isboxpublickey
 use        Tweetnaclhl__isboxsecretkey as Tweetnaclhl__isboxsecretkey
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnaclhl__issigned as Tweetnaclhl__issigned
 use        Tweetnaclhl__neverusedyet as Tweetnaclhl__neverusedyet
 use        Tweetnacl_h__ciphertext as Tweetnacl_h__ciphertext
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val crypto_box 
   (c : Array__Int__Tweetnacl_h__u8.map__ref) (c__first : Tweetnacl_h__Tu64B.tu64B) (c__last : Tweetnacl_h__Tu64B.tu64B) (sm : Tweetnacl_h__plaintext.plaintext) (n : Array__Int__Tweetnacl_h__u8.map) (pk : Array__Int__Tweetnacl_h__u8.map) (sk : Array__Int__Tweetnacl_h__u8.map) : unit
  requires {  ( ( ( ( ( [@GP_Pretty_Ada:14237] ((Integer.length (Tweetnacl_h__Tu64B__rep.to_rep c__first) (Tweetnacl_h__Tu64B__rep.to_rep c__last)) = ((Tweetnacl_h__plaintext.length sm) + (32 : int))) ) /\ ( [@GP_Pretty_Ada:14247] ((epsilon temp___result_344 : int.
   ( (temp___result_344 = (Tweetnaclhl__isboxpublickey.isboxpublickey pk)) /\ (Tweetnaclhl__isboxpublickey.isboxpublickey__function_guard temp___result_344 pk) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:14253] ((epsilon temp___result_345 : int.
   ( (temp___result_345 = (Tweetnaclhl__isboxsecretkey.isboxsecretkey sk)) /\ (Tweetnaclhl__isboxsecretkey.isboxsecretkey__function_guard temp___result_345 sk) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:14259] ((epsilon temp___result_346 : int.
   ( (temp___result_346 = (Tweetnaclhl__issigned.issigned sm)) /\ (Tweetnaclhl__issigned.issigned__function_guard temp___result_346 sm) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:14265] ((epsilon temp___result_347 : int.
   ( (temp___result_347 = (Tweetnaclhl__neverusedyet.neverusedyet n)) /\ (Tweetnaclhl__neverusedyet.neverusedyet__function_guard temp___result_347 n) )) = (0 : int)) ) ) }
  ensures {  (if (True) then (
   true) else (
   (Tweetnacl_h__ciphertext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__Tu64B__rep.to_rep c__first) (Tweetnacl_h__Tu64B__rep.to_rep c__last)))) }
  writes {c}

end

(* Module for declaring a program function (and possibly an axiom) for "crypto_box_open" defined at tweetnaclhl.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__crypto_box_open___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnaclhl__isboxpublickey as Tweetnaclhl__isboxpublickey
 use        Tweetnaclhl__isboxsecretkey as Tweetnaclhl__isboxsecretkey
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnaclhl__issigned as Tweetnaclhl__issigned
 use        Tweetnacl_h__ciphertext as Tweetnacl_h__ciphertext
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val crypto_box_open 
   (sm : Array__Int__Tweetnacl_h__u8.map__ref) (sm__first : Tweetnacl_h__Tu64B.tu64B) (sm__last : Tweetnacl_h__Tu64B.tu64B) (c : Tweetnacl_h__ciphertext.ciphertext) (n : Array__Int__Tweetnacl_h__u8.map) (pk : Array__Int__Tweetnacl_h__u8.map) (sk : Array__Int__Tweetnacl_h__u8.map) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:14328] ((Tweetnacl_h__ciphertext.length c) = ((Integer.length (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last)) + (32 : int))) ) /\ ( [@GP_Pretty_Ada:14338] ((epsilon temp___result_354 : int.
   ( (temp___result_354 = (Tweetnaclhl__isboxpublickey.isboxpublickey pk)) /\ (Tweetnaclhl__isboxpublickey.isboxpublickey__function_guard temp___result_354 pk) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:14344] ((epsilon temp___result_355 : int.
   ( (temp___result_355 = (Tweetnaclhl__isboxsecretkey.isboxsecretkey sk)) /\ (Tweetnaclhl__isboxsecretkey.isboxsecretkey__function_guard temp___result_355 sk) )) = (0 : int)) ) ) }
  ensures {  ( ( [@GP_Pretty_Ada:28756] ((epsilon temp___result_356 : int.
   ( (temp___result_356 = (Tweetnaclhl__issigned.issigned (Tweetnacl_h__plaintext.of_array sm.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last)))) /\ (Tweetnaclhl__issigned.issigned__function_guard temp___result_356 (Tweetnacl_h__plaintext.of_array sm.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last))) )) = (0 : int)) ) /\ (if (True) then (
   true) else (
   (Tweetnacl_h__plaintext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__Tu64B__rep.to_rep sm__first) (Tweetnacl_h__Tu64B__rep.to_rep sm__last)))) ) }
  writes {sm}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:9186] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:9192] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "crypto_sign_open" defined at tweetnaclhl.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tweetnaclhl__crypto_sign_open___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Tweetnaclhl__issignpublickey as Tweetnaclhl__issignpublickey
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnaclhl__issigned as Tweetnaclhl__issigned
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 val crypto_sign_open 
   (m : Array__Int__Tweetnacl_h__u8.map__ref) (m__first : Tweetnacl_h__Tu64B.tu64B) (m__last : Tweetnacl_h__Tu64B.tu64B) (sm : Tweetnacl_h__plaintext.plaintext) (pk : Array__Int__Tweetnacl_h__u8.map) : unit
  requires {  ( ( ( [@GP_Pretty_Ada:14502] ((Integer.length (Tweetnacl_h__Tu64B__rep.to_rep m__first) (Tweetnacl_h__Tu64B__rep.to_rep m__last)) = ((Tweetnacl_h__plaintext.length sm) - (64 : int))) ) /\ ( [@GP_Pretty_Ada:14512] ((epsilon temp___result_364 : int.
   ( (temp___result_364 = (Tweetnaclhl__issignpublickey.issignpublickey pk)) /\ (Tweetnaclhl__issignpublickey.issignpublickey__function_guard temp___result_364 pk) )) = (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:14518] ((epsilon temp___result_365 : int.
   ( (temp___result_365 = (Tweetnaclhl__issigned.issigned sm)) /\ (Tweetnaclhl__issigned.issigned__function_guard temp___result_365 sm) )) = (0 : int)) ) ) }
  ensures {  (if (True) then (
   true) else (
   (Tweetnacl_h__plaintext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__Tu64B__rep.to_rep m__first) (Tweetnacl_h__Tu64B__rep.to_rep m__last)))) }
  writes {m}

end

(* Module for defining the value of the aggregate at test.adb:15, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Test__m__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".BV8 as BV8
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Tweetnacl_h__u8___axiom as Tweetnacl_h__u8___axiom
 use        Tweetnacl_h__u8__rep as Tweetnacl_h__u8__rep
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__m__aggregate_def as Test__m__aggregate_def
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8

 axiom def_axiom :
  (forall temp___371   temp___372   temp___373   temp___374   temp___375   temp___376   temp___377   temp___378   temp___379   temp___380   temp___381   temp___382   temp___383   temp___384   temp___385   temp___386   temp___387   temp___388   temp___389   temp___390   temp___391   temp___392   temp___393   temp___394   temp___395   temp___396   temp___397   temp___398   temp___399   temp___400   temp___401   temp___402   temp___403   temp___404   temp___405   temp___406   temp___407   : BV8.t.
   (let temp___370 [@mlw:proxy_symbol] [@introduced] = (Test__m__aggregate_def.test__m__aggregate_def temp___371 temp___372 temp___373 temp___374 temp___375 temp___376 temp___377 temp___378 temp___379 temp___380 temp___381 temp___382 temp___383 temp___384 temp___385 temp___386 temp___387 temp___388 temp___389 temp___390 temp___391 temp___392 temp___393 temp___394 temp___395 temp___396 temp___397 temp___398 temp___399 temp___400 temp___401 temp___402 temp___403 temp___404 temp___405 temp___406 temp___407) in (
    (if (( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___371 True True True True) /\ (Tweetnacl_h__u8___axiom.dynamic_invariant temp___372 True True True True) )/\( ( ( ( ( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___373 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___374 True True True True) )/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___375 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___376 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___377 True True True True) ) )/\( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___378 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___379 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___380 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___381 True True True True) ) ) )/\( ( ( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___382 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___383 True True True True) )/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___384 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___385 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___386 True True True True) ) )/\( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___387 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___388 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___389 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___390 True True True True) ) ) ) )/\( ( ( ( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___391 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___392 True True True True) )/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___393 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___394 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___395 True True True True) ) )/\( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___396 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___397 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___398 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___399 True True True True) ) ) )/\( ( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___400 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___401 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___402 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___403 True True True True) ) )/\( ( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___404 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___405 True True True True) )/\( (Tweetnacl_h__u8___axiom.dynamic_invariant temp___406 True True True True)/\(Tweetnacl_h__u8___axiom.dynamic_invariant temp___407 True True True True) ) ) ) ) ) )) then (
     ( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (1 : int))) = temp___371) /\ ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (2 : int))) = temp___372) )/\( ( ( ( ( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (3 : int))) = temp___373)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (4 : int))) = temp___374) )/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (5 : int))) = temp___375) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (6 : int))) = temp___376)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (7 : int))) = temp___377) ) )/\( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (8 : int))) = temp___378)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (9 : int))) = temp___379) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (10 : int))) = temp___380)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (11 : int))) = temp___381) ) ) )/\( ( ( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (12 : int))) = temp___382)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (13 : int))) = temp___383) )/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (14 : int))) = temp___384) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (15 : int))) = temp___385)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (16 : int))) = temp___386) ) )/\( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (17 : int))) = temp___387)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (18 : int))) = temp___388) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (19 : int))) = temp___389)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (20 : int))) = temp___390) ) ) ) )/\( ( ( ( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (21 : int))) = temp___391)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (22 : int))) = temp___392) )/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (23 : int))) = temp___393) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (24 : int))) = temp___394)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (25 : int))) = temp___395) ) )/\( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (26 : int))) = temp___396)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (27 : int))) = temp___397) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (28 : int))) = temp___398)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (29 : int))) = temp___399) ) ) )/\( ( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (30 : int))) = temp___400)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (31 : int))) = temp___401) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (32 : int))) = temp___402)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (33 : int))) = temp___403) ) )/\( ( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (34 : int))) = temp___404)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (35 : int))) = temp___405) )/\( ((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (36 : int))) = temp___406)/\((Tweetnacl_h__u8__rep.to_rep (Array__Int__Tweetnacl_h__u8.get temp___370 (37 : int))) = temp___407) ) ) ) ) ) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "test" defined at test.adb:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Test__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".BV8 as BV8
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__string as Standard__string
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__csk as Test__csk
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__cpk as Test__cpk
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__ssk as Test__ssk
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__spk as Test__spk
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__n as Test__n
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__m as Test__m
 use        Tweetnacl_h__Tu64B as Tweetnacl_h__Tu64B
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__sm as Test__sm
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__c as Test__c
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__smu as Test__smu
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Test__mu as Test__mu
 use        Tweetnaclhl__crypto_box_keypair___axiom as Tweetnaclhl__crypto_box_keypair___axiom
 use        Tweetnaclhl__crypto_sign_keypair___axiom as Tweetnaclhl__crypto_sign_keypair___axiom
 use        Tweetnacl_h__plaintext as Tweetnacl_h__plaintext
 use        Tweetnaclhl__crypto_sign___axiom as Tweetnaclhl__crypto_sign___axiom
 use        Tweetnaclhl__randombytes__2___axiom as Tweetnaclhl__randombytes__2___axiom
 use        Tweetnaclhl__crypto_box___axiom as Tweetnaclhl__crypto_box___axiom
 use        Tweetnacl_h__ciphertext as Tweetnacl_h__ciphertext
 use        Tweetnaclhl__crypto_box_open___axiom as Tweetnaclhl__crypto_box_open___axiom
 use        Test__L_1__i as Test__L_1__i
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Tweetnaclhl__crypto_sign_open___axiom as Tweetnaclhl__crypto_sign_open___axiom
 use        Test__L_2__i as Test__L_2__i
 use        Tweetnacl_h__u8 as Tweetnacl_h__u8
 use        Tweetnacl_h__u8__rep as Tweetnacl_h__u8__rep
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Tweetnacl_h__key___axiom as Tweetnacl_h__key___axiom
 use        Tweetnacl_h__key64___axiom as Tweetnacl_h__key64___axiom
 use        Tweetnacl_h__nonce___axiom as Tweetnacl_h__nonce___axiom
 use        Tweetnacl_h__Tu64B__rep as Tweetnacl_h__Tu64B__rep
 use        Tweetnacl_h__index as Tweetnacl_h__index
 use        Test__T1b as Test__T1b
 use        Test__TsmS as Test__TsmS
 use        Test__TcS as Test__TcS
 use        Test__TsmuS as Test__TsmuS
 use        Test__TmuS as Test__TmuS
 use        Test__L_1 as Test__L_1
 use        Test__L_2 as Test__L_2
 use        Test__TsmS___axiom as Test__TsmS___axiom
 use        Test__TcS___axiom as Test__TcS___axiom
 use        Test__TsmuS___axiom as Test__TsmuS___axiom
 use        Test__TmuS___axiom as Test__TmuS___axiom
 use        Test__m__aggregate_def as Test__m__aggregate_def
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Temp___String_Literal_420 as Temp___String_Literal_420
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Array__Int__Tweetnacl_h__u8 as Array__Int__Tweetnacl_h__u8
 use        Temp___String_Literal_423 as Temp___String_Literal_423
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Test__csk___axiom as Test__csk___axiom
 use        Test__cpk___axiom as Test__cpk___axiom
 use        Test__ssk___axiom as Test__ssk___axiom
 use        Test__spk___axiom as Test__spk___axiom
 use        Test__n___axiom as Test__n___axiom
 use        Test__m___axiom as Test__m___axiom
 use        Test__m__aggregate_def___axiom as Test__m__aggregate_def___axiom
 use        Test__sm___axiom as Test__sm___axiom
 use        Test__c___axiom as Test__c___axiom
 use        Test__smu___axiom as Test__smu___axiom
 use        Test__mu___axiom as Test__mu___axiom
 use        Test__L_1__i___axiom as Test__L_1__i___axiom
 use        Test__L_2__i___axiom as Test__L_2__i___axiom
 use        Test__L_1___axiom as Test__L_1___axiom
 use        Test__L_2___axiom as Test__L_2___axiom
 use        Interfaces__c__int___axiom as Interfaces__c__int___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put_line__2___axiom as Ada__text_io__put_line__2___axiom
 use        Tweetnaclhl__crypto_box___axiom as Tweetnaclhl__crypto_box___axiom
 use        Tweetnaclhl__crypto_box_open___axiom as Tweetnaclhl__crypto_box_open___axiom
 use        Tweetnaclhl__crypto_box_keypair___axiom as Tweetnaclhl__crypto_box_keypair___axiom
 use        Tweetnaclhl__crypto_sign___axiom as Tweetnaclhl__crypto_sign___axiom
 use        Tweetnaclhl__crypto_sign_open___axiom as Tweetnaclhl__crypto_sign_open___axiom
 use        Tweetnaclhl__crypto_sign_keypair___axiom as Tweetnaclhl__crypto_sign_keypair___axiom
 use        Tweetnaclhl__randombytes__2___axiom as Tweetnaclhl__randombytes__2___axiom
 use        Tweetnaclhl__isboxpublickey___axiom as Tweetnaclhl__isboxpublickey___axiom
 use        Tweetnaclhl__isboxsecretkey___axiom as Tweetnaclhl__isboxsecretkey___axiom
 use        Tweetnaclhl__issignpublickey___axiom as Tweetnaclhl__issignpublickey___axiom
 use        Tweetnaclhl__issignsecretkey___axiom as Tweetnaclhl__issignsecretkey___axiom
 use        Tweetnaclhl__issigned___axiom as Tweetnaclhl__issigned___axiom
 use        Tweetnaclhl__neverusedyet___axiom as Tweetnaclhl__neverusedyet___axiom
 use        Tweetnacl_h__u8___axiom as Tweetnacl_h__u8___axiom
 use        Tweetnacl_h__index___axiom as Tweetnacl_h__index___axiom
 use        Tweetnacl_h__nonce___axiom as Tweetnacl_h__nonce___axiom
 use        Tweetnacl_h__key___axiom as Tweetnacl_h__key___axiom
 use        Tweetnacl_h__key64___axiom as Tweetnacl_h__key64___axiom
 use        Tweetnacl_h__ciphertext___axiom as Tweetnacl_h__ciphertext___axiom
 use        Tweetnacl_h__plaintext___axiom as Tweetnacl_h__plaintext___axiom
 use        Tweetnacl_h__Tu64B___axiom as Tweetnacl_h__Tu64B___axiom
 use        Test__T1b___axiom as Test__T1b___axiom
 use        Test__TsmS___axiom as Test__TsmS___axiom
 use        Test__TcS___axiom as Test__TcS___axiom
 use        Test__TsmuS___axiom as Test__TsmuS___axiom
 use        Test__TmuS___axiom as Test__TmuS___axiom

 let def [#"test.adb" 8 0 0][@GP_Subp:test.adb:8] 
   (__void_param : unit)
  requires { [#"test.adb" 8 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram test.adb:8 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram test.adb:8 *)
  ;
  () (* Check for RTE in the Pre of the subprogram test.adb:8 *)
  ;
  [#"test.adb" 8 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram test.adb:8 *)
  ;
  [#"test.adb" 8 0 0] try
   ( ();
   ([#"test.adb" 10 0 0] ( [#"test.adb" 10 0 0] assume { [#"test.adb" 10 0 0] (Tweetnacl_h__key___axiom.default_initial_assumption Test__csk.csk.Array__Int__Tweetnacl_h__u8.map__content False) };
   [#"test.adb" 10 0 0] assume { [#"test.adb" 10 0 0] (Tweetnacl_h__key___axiom.dynamic_invariant Test__csk.csk.Array__Int__Tweetnacl_h__u8.map__content False False True True) } ));
   ([#"test.adb" 11 0 0] ( [#"test.adb" 11 0 0] assume { [#"test.adb" 11 0 0] (Tweetnacl_h__key___axiom.default_initial_assumption Test__cpk.cpk.Array__Int__Tweetnacl_h__u8.map__content False) };
   [#"test.adb" 11 0 0] assume { [#"test.adb" 11 0 0] (Tweetnacl_h__key___axiom.dynamic_invariant Test__cpk.cpk.Array__Int__Tweetnacl_h__u8.map__content False False True True) } ));
   ([#"test.adb" 12 0 0] ( [#"test.adb" 12 0 0] assume { [#"test.adb" 12 0 0] (Tweetnacl_h__key64___axiom.default_initial_assumption Test__ssk.ssk.Array__Int__Tweetnacl_h__u8.map__content False) };
   [#"test.adb" 12 0 0] assume { [#"test.adb" 12 0 0] (Tweetnacl_h__key64___axiom.dynamic_invariant Test__ssk.ssk.Array__Int__Tweetnacl_h__u8.map__content False False True True) } ));
   ([#"test.adb" 13 0 0] ( [#"test.adb" 13 0 0] assume { [#"test.adb" 13 0 0] (Tweetnacl_h__key___axiom.default_initial_assumption Test__spk.spk.Array__Int__Tweetnacl_h__u8.map__content False) };
   [#"test.adb" 13 0 0] assume { [#"test.adb" 13 0 0] (Tweetnacl_h__key___axiom.dynamic_invariant Test__spk.spk.Array__Int__Tweetnacl_h__u8.map__content False False True True) } ));
   ([#"test.adb" 14 0 0] ( [#"test.adb" 14 0 0] assume { [#"test.adb" 14 0 0] (Tweetnacl_h__nonce___axiom.default_initial_assumption Test__n.n.Array__Int__Tweetnacl_h__u8.map__content False) };
   [#"test.adb" 14 0 0] assume { [#"test.adb" 14 0 0] (Tweetnacl_h__nonce___axiom.dynamic_invariant Test__n.n.Array__Int__Tweetnacl_h__u8.map__content False False True True) } ));
   ([#"test.adb" 15 0 0] ( (let test__m__assume = (Tweetnacl_h__plaintext.of_array((Test__m__aggregate_def.test__m__aggregate_def(( 65 : BV8.t )) (( 100 : BV8.t )) (( 97 : BV8.t )) (( 32 : BV8.t )) (( 105 : BV8.t )) (( 115 : BV8.t )) (( 32 : BV8.t )) (( 116 : BV8.t )) (( 104 : BV8.t )) (( 101 : BV8.t )) (( 32 : BV8.t )) (( 112 : BV8.t )) (( 114 : BV8.t )) (( 101 : BV8.t )) (( 116 : BV8.t )) (( 116 : BV8.t )) (( 105 : BV8.t )) (( 101 : BV8.t )) (( 115 : BV8.t )) (( 116 : BV8.t )) (( 32 : BV8.t )) (( 111 : BV8.t )) (( 102 : BV8.t )) (( 32 : BV8.t )) (( 97 : BV8.t )) (( 108 : BV8.t )) (( 108 : BV8.t )) (( 32 : BV8.t )) (( 108 : BV8.t )) (( 97 : BV8.t )) (( 110 : BV8.t )) (( 103 : BV8.t )) (( 117 : BV8.t )) (( 97 : BV8.t )) (( 103 : BV8.t )) (( 101 : BV8.t )) (( 115 : BV8.t )))) (Test__T1b.first) (Test__T1b.last)) in (
    ( [#"test.adb" 15 0 0] (Test__m.m.Array__Int__Tweetnacl_h__u8.map__content <- ( (Tweetnacl_h__plaintext.to_array(test__m__assume)) ));
    [#"test.adb" 15 0 0] assume { [#"test.adb" 15 0 0] ((Tweetnacl_h__Tu64B__rep.to_rep(Test__m.m__first)) = (Tweetnacl_h__plaintext.first(test__m__assume))) };
    [#"test.adb" 15 0 0] assume { [#"test.adb" 15 0 0] ((Tweetnacl_h__Tu64B__rep.to_rep(Test__m.m__last)) = (Tweetnacl_h__plaintext.last(test__m__assume))) } )))
   ;
   [#"test.adb" 15 0 0] assume { [#"test.adb" 15 0 0] (if (False) then (
    true) else (
    (Tweetnacl_h__plaintext.dynamic_property Tweetnacl_h__index.first Tweetnacl_h__index.last (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)))) } ));
   ([#"test.adb" 16 0 0] ());
   ([#"test.adb" 16 0 0] ());
   ([#"test.adb" 16 0 0] ( [#"test.adb" 16 0 0] begin ensures {true} let _ = (let _ = ([#"test.adb" 16 0 0] ( [@GP_Shape:TsmS_def__plaintext_ind__range__add] [@comment:   sm : PlainText(m'First..m'Last+64);                                  ^ test.adb:16:34:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:test.adb:16:34] [@GP_Id:1] (Tweetnacl_h__Tu64B.range_check_(((Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 16 0 0] begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__last ))) + (64 : int)))) )) in (
    ()))
    in () end ;
    begin ensures {true} let _ = (let _ = (Tweetnacl_h__Tu64B__rep.to_rep((  begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__first ))) in (
    ()))
    in () end ;
   ([#"test.adb" 16 0 0] [#"test.adb" 16 0 0] (val _f : unit
   requires {( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:   sm : PlainText(m'First..m'Last+64);    ^ test.adb:16:4:VC_RANGE_CHECK] [@GP_Id:0] [@GP_Sloc:test.adb:16:4] [#"test.adb" 16 0 0] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) <= ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) -> ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) >= Tweetnacl_h__index.first) /\ (((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int)) <= Tweetnacl_h__index.last) ) ) )} 
   ensures {[#"test.adb" 16 0 0] true} 
   in _f)) ));
   ([#"test.adb" 16 0 0] ( [#"test.adb" 16 0 0] assume { [#"test.adb" 16 0 0] (Test__TsmS___axiom.default_initial_assumption (Test__TsmS.of_array Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last)) False) };
   [#"test.adb" 16 0 0] assume { [#"test.adb" 16 0 0] (if (False) then (
    true) else (
    ( (Test__TsmS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int)) (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last)) /\ ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) /\ ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) ) ))) } ));
   ([#"test.adb" 17 0 0] ());
   ([#"test.adb" 17 0 0] ());
   ([#"test.adb" 17 0 0] ( [#"test.adb" 17 0 0] begin ensures {true} let _ = (let _ = ([#"test.adb" 17 0 0] ( [@GP_Sloc:test.adb:17:36] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:   c : CipherText(sm'First..sm'Last+32);                                    ^ test.adb:17:36:VC_OVERFLOW_CHECK] [@GP_Shape:TcS_def__ciphertext_ind__range__add] [@GP_Id:3] (Tweetnacl_h__Tu64B.range_check_(((Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 17 0 0] begin ensures {true} let _ = (let _ = Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__sm.sm__last ))) + (32 : int)))) )) in (
    ()))
    in () end ;
    begin ensures {true} let _ = (let _ = (Tweetnacl_h__Tu64B__rep.to_rep((  begin ensures {true} let _ = (let _ = Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__sm.sm__first ))) in (
    ()))
    in () end ;
   ([#"test.adb" 17 0 0] [#"test.adb" 17 0 0] (val _f : unit
   requires {( [@vc:annotation] [@GP_Sloc:test.adb:17:4] [@GP_Reason:VC_RANGE_CHECK] [@comment:   c : CipherText(sm'First..sm'Last+32);    ^ test.adb:17:4:VC_RANGE_CHECK] [@GP_Id:2] [#"test.adb" 17 0 0] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) <= ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int))) -> ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) >= Tweetnacl_h__index.first) /\ (((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int)) <= Tweetnacl_h__index.last) ) ) )} 
   ensures {[#"test.adb" 17 0 0] true} 
   in _f)) ));
   ([#"test.adb" 17 0 0] ( [#"test.adb" 17 0 0] assume { [#"test.adb" 17 0 0] (Test__TcS___axiom.default_initial_assumption (Test__TcS.of_array Test__c.c.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep Test__c.c__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__c.c__last)) False) };
   [#"test.adb" 17 0 0] assume { [#"test.adb" 17 0 0] (if (False) then (
    true) else (
    ( (Test__TcS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int)) (Tweetnacl_h__Tu64B__rep.to_rep Test__c.c__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__c.c__last)) /\ ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__c.c__first) = (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first)) /\ ((Tweetnacl_h__Tu64B__rep.to_rep Test__c.c__last) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last) + (32 : int))) ) ))) } ));
   ([#"test.adb" 18 0 0] ());
   ([#"test.adb" 18 0 0] ());
   ([#"test.adb" 18 0 0] ( [#"test.adb" 18 0 0] begin ensures {true} let _ = (let _ = ([#"test.adb" 18 0 0] ( [@comment:   smu : PlainText(m'First..m'Last+64);                                   ^ test.adb:18:35:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:test.adb:18:35] [@GP_Shape:TsmuS_def__plaintext_ind__range__add] [@GP_Id:5] (Tweetnacl_h__Tu64B.range_check_(((Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 18 0 0] begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__last ))) + (64 : int)))) )) in (
    ()))
    in () end ;
    begin ensures {true} let _ = (let _ = (Tweetnacl_h__Tu64B__rep.to_rep((  begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__first ))) in (
    ()))
    in () end ;
   ([#"test.adb" 18 0 0] [#"test.adb" 18 0 0] (val _f : unit
   requires {( [@vc:annotation] [@comment:   smu : PlainText(m'First..m'Last+64);    ^ test.adb:18:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:4] [@GP_Sloc:test.adb:18:4] [#"test.adb" 18 0 0] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) <= ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) -> ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) >= Tweetnacl_h__index.first) /\ (((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int)) <= Tweetnacl_h__index.last) ) ) )} 
   ensures {[#"test.adb" 18 0 0] true} 
   in _f)) ));
   ([#"test.adb" 18 0 0] ( [#"test.adb" 18 0 0] assume { [#"test.adb" 18 0 0] (Test__TsmuS___axiom.default_initial_assumption (Test__TsmuS.of_array Test__smu.smu.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__last)) False) };
   [#"test.adb" 18 0 0] assume { [#"test.adb" 18 0 0] (if (False) then (
    true) else (
    ( (Test__TsmuS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int)) (Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__last)) /\ ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__first) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) /\ ((Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__last) = ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) + (64 : int))) ) ))) } ));
   ([#"test.adb" 19 0 0] ());
   ([#"test.adb" 19 0 0] ());
   ([#"test.adb" 19 0 0] ( [#"test.adb" 19 0 0] begin ensures {true} let _ = (let _ = (Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 19 0 0] begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__last ))) in (
    ()))
    in () end ;
   [#"test.adb" 19 0 0] begin ensures {true} let _ = (let _ = (Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 19 0 0] begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__first ))) in (
    ()))
    in () end ;
   ([#"test.adb" 19 0 0] [#"test.adb" 19 0 0] (val _f : unit
   requires {( [@GP_Sloc:test.adb:19:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:   mu : PlainText(m'First..m'Last);    ^ test.adb:19:4:VC_RANGE_CHECK] [@GP_Id:6] [#"test.adb" 19 0 0] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) <= (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)) -> ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) >= Tweetnacl_h__index.first) /\ ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) <= Tweetnacl_h__index.last) ) ) )} 
   ensures {[#"test.adb" 19 0 0] true} 
   in _f)) ));
   ([#"test.adb" 19 0 0] ( [#"test.adb" 19 0 0] assume { [#"test.adb" 19 0 0] (Test__TmuS___axiom.default_initial_assumption (Test__TmuS.of_array Test__mu.mu.Array__Int__Tweetnacl_h__u8.map__content (Tweetnacl_h__Tu64B__rep.to_rep Test__mu.mu__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__mu.mu__last)) False) };
   [#"test.adb" 19 0 0] assume { [#"test.adb" 19 0 0] (if (False) then (
    true) else (
    ( (Test__TmuS.dynamic_property (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last) (Tweetnacl_h__Tu64B__rep.to_rep Test__mu.mu__first) (Tweetnacl_h__Tu64B__rep.to_rep Test__mu.mu__last)) /\ ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__mu.mu__first) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first)) /\ ((Tweetnacl_h__Tu64B__rep.to_rep Test__mu.mu__last) = (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)) ) ))) } ));
   ([#"test.adb" 29 0 0] ());
   ([#"test.adb" 35 0 0] ());
   ();
   ( [@GP_Sloc:test.adb:23:23] ([#"test.adb" 23 0 0] ()) );
   ( [@GP_Sloc:test.adb:23:27] ([#"test.adb" 23 0 0] ()) );
   ( [@GP_Sloc:test.adb:23:4] ([#"test.adb" 23 0 0] ()) );
   ( [@GP_Sloc:test.adb:23:4] ([#"test.adb" 23 0 0] ( (Tweetnaclhl__crypto_box_keypair___axiom.crypto_box_keypair(Test__cpk.cpk) (Test__csk.csk)) )) );
   ( [@GP_Sloc:test.adb:24:24] ([#"test.adb" 24 0 0] ()) );
   ( [@GP_Sloc:test.adb:24:28] ([#"test.adb" 24 0 0] ()) );
   ( [@GP_Sloc:test.adb:24:4] ([#"test.adb" 24 0 0] ()) );
   ( [@GP_Sloc:test.adb:24:4] ([#"test.adb" 24 0 0] ( (Tweetnaclhl__crypto_sign_keypair___axiom.crypto_sign_keypair(Test__spk.spk) (Test__ssk.ssk)) )) );
   ( [@GP_Sloc:test.adb:25:16] ([#"test.adb" 25 0 0] ()) );
   ( [@GP_Sloc:test.adb:25:19] ([#"test.adb" 25 0 0] ()) );
   ( [@GP_Sloc:test.adb:25:21] ([#"test.adb" 25 0 0] ()) );
   ( [@GP_Sloc:test.adb:25:4] ([#"test.adb" 25 0 0] ()) );
   ( [@GP_Sloc:test.adb:25:4] ([#"test.adb" 25 0 0] ( ([#"test.adb" 25 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:   crypto_sign(sm,m,ssk);    ^ test.adb:25:4:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:test.adb:25:4] [@GP_Id:7] [@GP_Shape:call_crypto_sign] (Tweetnaclhl__crypto_sign___axiom.crypto_sign(( [#"test.adb" 25 0 0] begin ensures {true} let _ = (let _ = Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__sm.sm )) (Test__sm.sm__first) (Test__sm.sm__last) ((Tweetnacl_h__plaintext.of_array(Test__m.m.Array__Int__Tweetnacl_h__u8.map__content) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__m.m__first))) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__m.m__last))))) (Test__ssk.ssk.Array__Int__Tweetnacl_h__u8.map__content)) )) )) );
   ( [@GP_Sloc:test.adb:26:16] ([#"test.adb" 26 0 0] ()) );
   ( [@GP_Sloc:test.adb:26:4] ([#"test.adb" 26 0 0] ()) );
   ( [@GP_Sloc:test.adb:26:4] ([#"test.adb" 26 0 0] ( (Tweetnaclhl__randombytes__2___axiom.randombytes__2(Test__n.n)) )) );
   ( [@GP_Sloc:test.adb:27:15] ([#"test.adb" 27 0 0] ()) );
   ( [@GP_Sloc:test.adb:27:17] ([#"test.adb" 27 0 0] ()) );
   ( [@GP_Sloc:test.adb:27:21] ([#"test.adb" 27 0 0] ()) );
   ( [@GP_Sloc:test.adb:27:24] ([#"test.adb" 27 0 0] ()) );
   ( [@GP_Sloc:test.adb:27:29] ([#"test.adb" 27 0 0] ()) );
   ( [@GP_Sloc:test.adb:27:4] ([#"test.adb" 27 0 0] ()) );
   ( [@GP_Sloc:test.adb:27:4] ([#"test.adb" 27 0 0] ( ([#"test.adb" 27 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:   crypto_box(c,sm, n, cpk, csk);    ^ test.adb:27:4:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:call_crypto_box] [@GP_Sloc:test.adb:27:4] [@GP_Id:8] (Tweetnaclhl__crypto_box___axiom.crypto_box(( [#"test.adb" 27 0 0] begin ensures {true} let _ = (let _ = Test__c.c.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__c.c )) (Test__c.c__first) (Test__c.c__last) ((Tweetnacl_h__plaintext.of_array(Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__sm.sm__first))) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__sm.sm__last))))) (Test__n.n.Array__Int__Tweetnacl_h__u8.map__content) (Test__cpk.cpk.Array__Int__Tweetnacl_h__u8.map__content) (Test__csk.csk.Array__Int__Tweetnacl_h__u8.map__content)) )) )) );
   ( [@GP_Sloc:test.adb:28:20] ([#"test.adb" 28 0 0] ()) );
   ( [@GP_Sloc:test.adb:28:24] ([#"test.adb" 28 0 0] ()) );
   ( [@GP_Sloc:test.adb:28:26] ([#"test.adb" 28 0 0] ()) );
   ( [@GP_Sloc:test.adb:28:28] ([#"test.adb" 28 0 0] ()) );
   ( [@GP_Sloc:test.adb:28:32] ([#"test.adb" 28 0 0] ()) );
   ( [@GP_Sloc:test.adb:28:4] ([#"test.adb" 28 0 0] ()) );
   ( [@GP_Sloc:test.adb:28:4] ([#"test.adb" 28 0 0] ( ([#"test.adb" 28 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:test.adb:28:4] [@comment:   crypto_box_open(smu,c,n,cpk,csk);    ^ test.adb:28:4:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:call_crypto_box_open] [@GP_Id:9] (Tweetnaclhl__crypto_box_open___axiom.crypto_box_open(( [#"test.adb" 28 0 0] begin ensures {true} let _ = (let _ = Test__smu.smu.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__smu.smu )) (Test__smu.smu__first) (Test__smu.smu__last) ((Tweetnacl_h__ciphertext.of_array(Test__c.c.Array__Int__Tweetnacl_h__u8.map__content) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__c.c__first))) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__c.c__last))))) (Test__n.n.Array__Int__Tweetnacl_h__u8.map__content) (Test__cpk.cpk.Array__Int__Tweetnacl_h__u8.map__content) (Test__csk.csk.Array__Int__Tweetnacl_h__u8.map__content)) )) )) );
   ( [@GP_Sloc:test.adb:29:13] ([#"test.adb" 29 0 0] ()) );
   ( [@GP_Sloc:test.adb:29:23] ([#"test.adb" 29 0 0] ()) );
   ( [@GP_Sloc:test.adb:29:31] ([#"test.adb" 29 0 0] (let temp___418 [@mlw:proxy_symbol] [@introduced] = (Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 29 0 0] begin ensures {true} let _ = (let _ = Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__sm.sm__first ))) in (
   (let temp___419 [@mlw:proxy_symbol] [@introduced] = (Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 29 0 0] begin ensures {true} let _ = (let _ = Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__sm.sm__last ))) in (
    ( [#"test.adb" 29 0 0] (Test__L_1__i.i.int__content <- ( temp___418 ));
    () (* Translation of an Ada loop from test.adb:29 *)
    ;
    (if ((Boolean.andb((temp___418 <= Test__L_1__i.i.int__content)) ((Test__L_1__i.i.int__content <= temp___419)))) then (
     [#"test.adb" 29 0 0] try
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop test.adb:29 *)
      ;
      () (* While loop translating the Ada loop from test.adb:29 *)
      ;
      [#"test.adb" 29 0 0] while True do
       ( () (* Assume implicit invariants from the loop test.adb:29 *)
       ;
       [#"test.adb" 29 0 0] assume { [#"test.adb" 29 0 0] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) <= Test__L_1__i.i.int__content) /\ (Test__L_1__i.i.int__content <= (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last)) ) };
       () (* Check for absence of RTE in the invariant of loop test.adb:29 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop test.adb:29 *)
       ;
       ();
       ( [@GP_Sloc:test.adb:30:10] ([#"test.adb" 30 0 0] ()) );
       ( [@GP_Sloc:test.adb:30:18] ([#"test.adb" 30 0 0] ()) );
       ( [@GP_Sloc:test.adb:30:7] ([#"test.adb" 30 0 0] (if (( ([#"test.adb" 30 0 0] [#"test.adb" 30 0 0] (([@branch_id=2553] Main.spark__branch).bool__content <- ( (BV8.neq((Tweetnacl_h__u8__rep.to_rep((Array__Int__Tweetnacl_h__u8.get(Test__smu.smu.Array__Int__Tweetnacl_h__u8.map__content) (( [#"test.adb" 30 0 0] assert { [#"test.adb" 30 0 0] ([#"test.adb" 30 0 0] ( [@GP_Id:10] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:      if smu(i)/=sm(i) then              ^ test.adb:30:14:VC_INDEX_CHECK] [@GP_Sloc:test.adb:30:14] [@GP_Shape:L_1_while__if__cmp__ixdcomp] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__first) <= Test__L_1__i.i.int__content) /\ (Test__L_1__i.i.int__content <= (Tweetnacl_h__Tu64B__rep.to_rep Test__smu.smu__last)) ) )) };
       Test__L_1__i.i.int__content )))))) ((Tweetnacl_h__u8__rep.to_rep((Array__Int__Tweetnacl_h__u8.get(Test__sm.sm.Array__Int__Tweetnacl_h__u8.map__content) ((  assert {  ([#"test.adb" 30 0 0] ( [@GP_Id:11] [@vc:annotation] [@GP_Sloc:test.adb:30:21] [@GP_Reason:VC_INDEX_CHECK] [@comment:      if smu(i)/=sm(i) then                     ^ test.adb:30:21:VC_INDEX_CHECK] [@GP_Shape:L_1_while__if__cmp__ixdcomp] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__first) <= Test__L_1__i.i.int__content) /\ (Test__L_1__i.i.int__content <= (Tweetnacl_h__Tu64B__rep.to_rep Test__sm.sm__last)) ) )) };
       Test__L_1__i.i.int__content ))))))) )));
       ( [@branch_id=2553] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:test.adb:31:10] ([#"test.adb" 31 0 0] ()) );
        ( [@GP_Sloc:test.adb:31:10] ([#"test.adb" 31 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_420.temp___String_Literal_420(()))) ((1 : int)) ((62 : int))))) )) ) )) else (
        ()))) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop test.adb:29 *)
       ;
       (if ((Test__L_1__i.i.int__content = temp___419)) then (
         raise Test__L_1.L_1));
       ([#"test.adb" 29 0 0] [#"test.adb" 29 0 0] (Test__L_1__i.i.int__content <- ( (Test__L_1__i.i.int__content + (1 : int)) ))) )
      done )
     with
      Test__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:test.adb:34:21] ([#"test.adb" 34 0 0] ()) );
   ( [@GP_Sloc:test.adb:34:25] ([#"test.adb" 34 0 0] ()) );
   ( [@GP_Sloc:test.adb:34:30] ([#"test.adb" 34 0 0] ()) );
   ( [@GP_Sloc:test.adb:34:4] ([#"test.adb" 34 0 0] ()) );
   ( [@GP_Sloc:test.adb:34:4] ([#"test.adb" 34 0 0] ( ([#"test.adb" 34 0 0] ( [@GP_Id:12] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:call_crypto_sign_open] [@vc:annotation] [@comment:   crypto_sign_open(mu, smu, spk);    ^ test.adb:34:4:VC_PRECONDITION] [@GP_Sloc:test.adb:34:4] (Tweetnaclhl__crypto_sign_open___axiom.crypto_sign_open(( [#"test.adb" 34 0 0] begin ensures {true} let _ = (let _ = Test__mu.mu.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__mu.mu )) (Test__mu.mu__first) (Test__mu.mu__last) ((Tweetnacl_h__plaintext.of_array(Test__smu.smu.Array__Int__Tweetnacl_h__u8.map__content) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__smu.smu__first))) ((Tweetnacl_h__Tu64B__rep.to_rep(Test__smu.smu__last))))) (Test__spk.spk.Array__Int__Tweetnacl_h__u8.map__content)) )) )) );
   ( [@GP_Sloc:test.adb:35:13] ([#"test.adb" 35 0 0] ()) );
   ( [@GP_Sloc:test.adb:35:22] ([#"test.adb" 35 0 0] ()) );
   ( [@GP_Sloc:test.adb:35:29] ([#"test.adb" 35 0 0] (let temp___421 [@mlw:proxy_symbol] [@introduced] = (Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 35 0 0] begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__first ))) in (
   (let temp___422 [@mlw:proxy_symbol] [@introduced] = (Tweetnacl_h__Tu64B__rep.to_rep(( [#"test.adb" 35 0 0] begin ensures {true} let _ = (let _ = Test__m.m.Array__Int__Tweetnacl_h__u8.map__content in (
    ()))
    in () end ;
   Test__m.m__last ))) in (
    ( [#"test.adb" 35 0 0] (Test__L_2__i.i.int__content <- ( temp___421 ));
    () (* Translation of an Ada loop from test.adb:35 *)
    ;
    (if ((Boolean.andb((temp___421 <= Test__L_2__i.i.int__content)) ((Test__L_2__i.i.int__content <= temp___422)))) then (
     [#"test.adb" 35 0 0] try
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop test.adb:35 *)
      ;
      () (* While loop translating the Ada loop from test.adb:35 *)
      ;
      [#"test.adb" 35 0 0] while True do
       ( () (* Assume implicit invariants from the loop test.adb:35 *)
       ;
       [#"test.adb" 35 0 0] assume { [#"test.adb" 35 0 0] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) <= Test__L_2__i.i.int__content) /\ (Test__L_2__i.i.int__content <= (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)) ) };
       () (* Check for absence of RTE in the invariant of loop test.adb:35 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop test.adb:35 *)
       ;
       ();
       ( [@GP_Sloc:test.adb:36:10] ([#"test.adb" 36 0 0] ()) );
       ( [@GP_Sloc:test.adb:36:17] ([#"test.adb" 36 0 0] ()) );
       ( [@GP_Sloc:test.adb:36:7] ([#"test.adb" 36 0 0] (if (( ([#"test.adb" 36 0 0] [#"test.adb" 36 0 0] (([@branch_id=2589] Main.spark__branch).bool__content <- ( (BV8.neq((Tweetnacl_h__u8__rep.to_rep((Array__Int__Tweetnacl_h__u8.get(Test__mu.mu.Array__Int__Tweetnacl_h__u8.map__content) (Test__L_2__i.i.int__content))))) ((Tweetnacl_h__u8__rep.to_rep((Array__Int__Tweetnacl_h__u8.get(Test__m.m.Array__Int__Tweetnacl_h__u8.map__content) (( [#"test.adb" 36 0 0] assert { [#"test.adb" 36 0 0] ([#"test.adb" 36 0 0] ( [@GP_Id:13] [@vc:annotation] [@GP_Sloc:test.adb:36:19] [@GP_Shape:L_2_while__if__cmp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@comment:      if mu(i)/=m(i) then                   ^ test.adb:36:19:VC_INDEX_CHECK] ( ((Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__first) <= Test__L_2__i.i.int__content) /\ (Test__L_2__i.i.int__content <= (Tweetnacl_h__Tu64B__rep.to_rep Test__m.m__last)) ) )) };
       Test__L_2__i.i.int__content ))))))) )));
       ( [@branch_id=2589] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:test.adb:37:10] ([#"test.adb" 37 0 0] ()) );
        ( [@GP_Sloc:test.adb:37:10] ([#"test.adb" 37 0 0] ( (Ada__text_io__put_line__2___axiom.put_line__2((Standard__string.of_array((Temp___String_Literal_423.temp___String_Literal_423(()))) ((1 : int)) ((48 : int))))) )) ) )) else (
        ()))) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop test.adb:35 *)
       ;
       (if ((Test__L_2__i.i.int__content = temp___422)) then (
         raise Test__L_2.L_2));
       ([#"test.adb" 35 0 0] [#"test.adb" 35 0 0] (Test__L_2__i.i.int__content <- ( (Test__L_2__i.i.int__content + (1 : int)) ))) )
      done )
     with
      Test__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
